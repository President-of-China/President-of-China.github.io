const data={language:"English",version:"0.0.1",headline:{value:"SPIKE Python",translate:!1},categories:[{category:{title:"Getting Started",translate:!0,components:[{text:{value:'<p>Here, you can start learning how to code using the Python programming language. You\u2019ll find many examples of programs that you can use as you explore the Python functionalities of LEGO<sup>\xAE</sup> Education SPIKE<sup>TM</sup> Prime. </p><p>Each time you see this icon <img valign="middle" src="./src/assets/icons/copy.svg"/>, click or tap on it to copy the content of the box. Then, paste it to the programming area, which we call the <i>Programming Canvas.</i> </p><p>Are you ready to get started? Here we go!</p>',translate:!0}},{section:{title:"Writing a Python Program",translate:!0,components:[{text:{value:"<p>Python is a very intuitive text-based coding language. It\u2019s an excellent programming language for beginners because it\u2019s concise and easy-to-read. It\u2019s also an excellent language for programmers because it can be used for everything from web development to software development and scientific applications.</p><p>There are only a few rules to keep in mind when you\u2019re writing commands.</p><ul><li>Importing libraries</li><li>Commenting code</li><li>Naming conventions</li></ul>",translate:!0}},{title:{value:"Importing Libraries",translate:!0}},{text:{value:'<p>When creating Python projects, you\u2019ll often have to import a library of functions. In programming terms, a <i>library</i> is basically all of the possible "ingredients" you can use to create your "recipe."</p><p>When you\u2019re using SPIKE Prime, you must always "include" the library that\u2019s linked to your hardware components (e.g., motors, Hub, sensors).</p>',translate:!0}},{snippet:{lines:[{line:"from spike import PrimeHub, MotorPair",translate:!1}]}},{text:{value:"<p>Here are some of the libraries that you can import:</p><ul><li>App</li><li>Hub</li><li>Light Matrix</li><li>Buttons</li><li>Speaker</li><li>Brick Status Light</li><li>Motion Sensor</li><li>Distance Sensor</li><li>Color Sensor</li><li>Force Sensor</li><li>Motor</li><li>Motor Pair</li><li>Operators</li></ul><p>The imported libraries are located at the beginning of the .py file. They should only appear once in the program.</p><p>If you\u2019re unsure of which libraries you should import, you can use the following code to import all of the possible libraries:</p>",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub, LightMatrix, Button, StatusLight, ForceSensor, MotionSensor, Speaker, ColorSensor, App, DistanceSensor, Motor, MotorPair
from spike.control import wait_for_seconds, wait_until, Timer`,translate:!1}]}},{title:{value:"Comments in Python",translate:!0}},{text:{value:'<p>Every line starting with a "#" is considered a comment. Therefore, it isn\u2019t executed as an action.</p>',translate:!0}},{snippet:{lines:[{line:"# This is a comment",translate:!0},{line:"# This is another comment",translate:!0}]}},{title:{value:"Indenting",translate:!0}},{text:{value:"<p>Python is sensitive to capitalization, spaces, and indenting. This makes coding easier once you\u2019re familiar with the<br/>rules. For example, there\u2019s a difference between:</p>",translate:!0}},{snippet:{lines:[{line:"x = 0",translate:!1},{line:"if x == 1:",translate:!1},{line:"print('LEGO')",translate:!1}]}},{text:{value:"<p>and</p>",translate:!0}},{snippet:{lines:[{line:"x = 0",translate:!1},{line:"if x == 1:",translate:!1},{line:"	print('LEGO')",translate:!1}]}},{title:{value:"Using this Knowledge Base",translate:!0}},{text:{value:'<p>This Knowledge Base has been organized into these sections:</p><ol><li><p>A <strong>step-by-step</strong> "getting started" flow to guide you through the exploration of the most common functions used to control the SPIKE Prime Hub, motors, and sensors. Also in this section, the <strong>Word Block Translator</strong> will show you how to convert Word Blocks into Python code for some functions.</p></li><li><p>The <strong>Pass the Brick</strong> lesson, which you can use to practice teamwork.</p></li><li><p>The <strong>SPIKE Python Reference</strong>, where you\u2019ll find descriptions of all of the functions (i.e., example programs) that you can experiment with. To explore and play around with these example programs, copy them to your project, then modify and customize them.</p></li></ol>',translate:!0}}]}},{section:{title:"Part 1: Programming Simple Outputs",translate:!0,components:[{title:{value:"Things You\u2019ll Need",translate:!0}},{image:{link:"./src/assets/images/battery.png"}},{text:{value:`<p>This is the Hub. You're going to create some short programs for it.</p> <ul> <li>Make sure that you\u2019ve: 
Installed the battery</li> <li>Turned it on by pressing the Center Button</li> <li>Connected it to your device via Bluetooth or USB</li> </ul>`,translate:!0}},{title:{value:"Controlling the Light Matrix",translate:!0}},{text:{value:"<p>Create your first program using Python.</p> <ol> <li>Copy the code shown below by clicking or tapping the copy icon <img valign='middle' src='./src/assets/icons/copy.svg'> in the box.</li><li>Paste the code to the Programming Canvas, where you\u2019ll write your code.<br><br> The green lines are simply comments. They won\u2019t influence your program's actions. The other lines are your program. Can you figure out what this first program will do?<br><br></li><li>Play the program.</li> </ol>",translate:!0}},{snippet:{lines:[{line:"# Import the PrimeHub class",translated:!0},{line:"from spike import PrimeHub",translated:!1},{line:"from spike.control import wait_for_seconds",translated:!1},{line:"# Initialize the Hub",translated:!0},{line:"your_hub = PrimeHub()",translated:!1},{line:"# Light up a smiley face",translated:!0},{line:`your_hub.light_matrix.show_image('HAPPY')
wait_for_seconds(5)
your_hub.light_matrix.off()`,translated:!1}]}},{text:{value:"<p>You should see this on the Hub.</p>",translate:!0}},{image:{link:"./src/assets/images/hub_smile.png"}},{text:{value:'<ol start="4"> <li>Change the image that\u2019s displayed on the Light Matrix.</li><ul><li>Change the parameter <code>"HAPPY"</code> to <code>"HEART"</code> in the code you already have. This will light up the heart instead of the happy face on the Hub.</li><li>Or, copy the code from the box below and paste it after the last line of your program. This will light up the happy face for 5 seconds and then light up a heart for 5 seconds.</li></ul></ol>',translate:!0}},{snippet:{lines:[{line:"# Add another image",translated:!0},{line:`your_hub.light_matrix.show_image('HEART')
wait_for_seconds(5)
your_hub.light_matrix.off()`,translated:!1}]}},{text:{value:"<p><span style='color: #0090F5'>To learn even more about this, explore the <b>SPIKE Python Reference</b> section of this Knowledge Base.</span></p>",translate:!0}},{text:{value:"<p><b>Congratulations!</b> You\u2019ve written your first program using Python. Keep going to learn more.</p><br><hr style='border: 0.5px solid #EFEFEF;'><br>",translate:!0}},{title:{value:"Playing Short Beeps and Time",translate:!0}},{text:{value:"<p>Let\u2019s make the Hub play some beeps.</p><ol><li>If there's already a program on your Programming Canvas, it\u2019s a good idea to delete it or start a new project before continuing.</li><li>Copy the code shown below to the Programming Canvas.</li><li>Make sure that you only have one line of code that starts with: <code>from spike import</code>.</li><li>Play the program!</li></ol> ",translate:!0}},{snippet:{lines:[{line:"# Import the PrimeHub class",translated:!0},{line:"from spike import PrimeHub",translated:!1},{line:"# Initialize the Hub",translated:!0},{line:"hub = PrimeHub()",translated:!1},{line:"# beep beep beep!",translated:!0},{line:"hub.speaker.beep(60, 1)",translated:!1}]}},{text:{value:'<ol start="2"> <li>Change the beat and tone. This is one way of doing it.</li> </ol>',translate:!0}},{snippet:{lines:[{line:"# Here\u2019s a new song",translated:!0},{line:`hub.speaker.beep(60, 0.5)
hub.speaker.beep(67, 1.0)
wait_for_seconds(0.5)
hub.speaker.beep(60, 0.5)`,translated:!1}]}},{text:{value:"<p><span style='color: #0090F5'>To learn more about this, explore the <b>SPIKE Python Reference</b> section of this Knowledge Base.</span></p><br><hr style='border: 0.5px solid #EFEFEF;'><br>",translate:!0}},{title:{value:"Playing Sounds",translate:!0}},{text:{value:"<p>You can also add sounds to be played from your device.</p>  <ol> <li>Copy the code shown below to the Programming Canvas. Play the program!</li> </ol> ",translate:!0}},{snippet:{lines:[{line:"# Import the PrimeHub class",translated:!0},{line:"from spike import App",translated:!1},{line:"# Initialize the app",translated:!0},{line:"app = App()",translated:!1},{line:"app.play_sound('Cat Meow 1')",translated:!1}]}},{text:{value:'<ol start="2"> <li>Pick another sound to play, or use this program.</li> </ol>',translate:!0}},{snippet:{lines:[{line:"app.play_sound('Triumph')",translated:!1}]}},{text:{value:"<p><span style='color: #0090F5'>To learn more about this, explore the <b>SPIKE Python Reference</b> section of this Knowledge Base.</span></p><br><hr style='border: 0.5px solid #EFEFEF;'><br>",translate:!0}},{title:{value:"Challenge",translate:!0}},{text:{value:"<p>Use the functions that you\u2019ve learned so far.</p><p>Create a short countdown program. It could be something like <i>3, 2, 1, BOOM</i>!</p>",translate:!0}}]}},{section:{title:"Part 2: Controlling the Motors",translate:!0,components:[{title:{value:"Things You\u2019ll Need",translate:!0}},{image:{link:"./src/assets/images/motor-portC.png"}},{text:{value:"<p>Now we\u2019ll connect a motor and turn it on. Connect a motor to one of the Ports with a letter (e.g., Port C).</p>",translate:!0}},{title:{value:"Run Single Motor for Time",translate:!0}},{text:{value:"<p>Let\u2019s run the motor for 2 seconds.</p><ol><li>Copy this code to the Programming Canvas.</li><li>Play the program and watch the motor.</li></ol>",translate:!0}},{snippet:{lines:[{line:"from spike import Motor",translated:!1},{line:"# Initialize the motor",translated:!0},{line:"motor = Motor('C')",translated:!1},{line:"# Rotate clockwise for 2 seconds at 75% speed",translated:!0},{line:"motor.run_for_seconds(2.0, 75)",translated:!1}]}},{text:{value:'<ol start="2"> <li>Modify your code to change the speed of the motor and the duration of its motion. Here\u2019s an example:</li> </ol>',translate:!0}},{snippet:{lines:[{line:"# Rotate counterclockwise for 6.5 seconds at 30% speed",translated:!0},{line:"motor.run_for_seconds(6.5, -30)",translated:!1}]}},{text:{value:"<p><span style='color: #0090F5'>To learn more about this, explore the <b>SPIKE Python Reference</b> section of this Knowledge Base.</span></p><br><hr style='border: 0.5px solid #EFEFEF;'><br>",translate:!0}},{title:{value:"Run Single Motor for Degrees",translate:!0}},{text:{value:"<p>Let\u2019s run the motor 360 degrees.</p>  <ol> <li>Copy the code shown below to the Programming Canvas</li><li>Play the program and watch the motor.</li> </ol> ",translate:!0}},{snippet:{lines:[{line:"from spike import Motor",translated:!1},{line:"# Initialize the motor",translated:!0},{line:"motor = Motor('C')",translated:!1},{line:"# Rotate the motor 360 degrees clockwise",translated:!0},{line:"motor.run_for_degrees(360)",translated:!1}]}},{text:{value:'<ol start="2"> <li>Modify your code to change the direction of the motor, using degrees of rotation. Here\u2019s an example:</li> </ol>',translate:!0}},{snippet:{lines:[{line:"# Run the motor 360 degrees clockwise, at 30% speed",translated:!0},{line:"motor.run_for_degrees(-360, 30)",translated:!1}]}},{text:{value:"<p><span style='color: #0090F5'>To learn more about this, explore the <b>SPIKE Python Reference</b> section of this Knowledge Base.</span></p><br><hr style='border: 0.5px solid #EFEFEF;'><br>",translate:!0}},{title:{value:"Run Single Motor to Position",translate:!0}},{image:{link:"./src/assets/images/motor-marker.png"}},{text:{value:"<p>Let\u2019s bring the motor from its current position to the 0-degree position. The marker on the motor indicates its position.</p>  <ol> <li>Copy this code to the Programming Canvas.</li><li>Play the program and watch the motor.</li> </ol> ",translate:!0}},{snippet:{lines:[{line:"from spike import Motor",translated:!1},{line:"# Initialize the motor",translated:!0},{line:"motor = Motor('C')",translated:!1},{line:'# Place the motor in position "0," aligning the markers',translated:!0},{line:"motor.run_to_position(0, 'shortest path', 75)",translated:!1}]}},{text:{value:'<ol start="2"> <li>Change your code to make the motor stop in different positions.</li> </ol>',translate:!0}},{snippet:{lines:[{line:"# Run the motor to different positions, at different speeds",translated:!0},{line:`wait_for_seconds(1)
motor.run_to_position(0, 'shortest path', 30)
wait_for_seconds(1)
motor.run_to_position(90, 'clockwise', 100)`,translated:!1}]}},{text:{value:"<p><span style='color: #0090F5'>To learn more about this, explore the <b>SPIKE Python Reference</b> section of this Knowledge Base.</span></p><br><hr style='border: 0.5px solid #EFEFEF;'><br>",translate:!0}},{title:{value:"Challenge",translate:!0}},{text:{value:"<p>Create a short program to run 2 motors on a beat. For example, run both motors in one direction, both in the other direction or in opposite directions. The only limit is your imagination!</p><p>Use the functions that you\u2019ve learned so far.</p>",translate:!0}}]}},{section:{title:"Part 3: Using the Force Sensor",translate:!0,components:[{title:{value:"Things You\u2019ll Need",translate:!0}},{image:{link:"./src/assets/images/motor-force.png"}},{text:{value:"<p>Connect a Force Sensor to Port B and a motor to Port C.</p>",translate:!0}},{title:{value:"Push, Start, Stop",translate:!0}},{text:{value:"<p>Let\u2019s use the Force Sensor to control the motor.</p><ol><li>Copy this code to the Programming Canvas.</li><li>Play the program and press the button on the Force Sensor.</li></ol>",translate:!0}},{snippet:{lines:[{line:"from spike import ForceSensor, Motor",translated:!1},{line:"# Initialize the Force Sensor and a motor",translated:!0},{line:`force_sensor = ForceSensor('B')
motor = Motor('C')`,translated:!1},{line:"# Press the button slowly, it will only work once # Play the program again to give it another go",translated:!0},{line:`motor.set_default_speed(25)
force_sensor.wait_until_pressed()
motor.start()
force_sensor.wait_until_released()
motor.stop()`,translated:!1}]}},{text:{value:'<ol start="3"> <li>Change your code to explore another interaction with the sensor.</li> </ol>',translate:!0}},{snippet:{lines:[{line:`motor.set_default_speed(25)
force_sensor.wait_until_pressed()
force_sensor.wait_until_released()
motor.start()
force_sensor.wait_until_pressed()
force_sensor.wait_until_released()
motor.stop()`,translated:!1}]}},{text:{value:"<p><span style='color: #0090F5'>To learn more about this, explore the <b>SPIKE Python Reference</b> section of this Knowledge Base.</span></p><br><hr style='border: 0.5px solid #EFEFEF;'><br>",translate:!0}}]}},{section:{title:"Part 4: Changing the Flow Using Loops and Conditions",translate:!0,components:[{title:{value:"Things You\u2019ll Need",translate:!0}},{image:{link:"./src/assets/images/motor-force.png"}},{text:{value:"<p>With a Force Sensor connected to Port B and a motor on Port C, let\u2019s explore ways of changing the program\u2019s execution flow.</p>",translate:!0}},{title:{value:"While Loop",translate:!0}},{text:{value:"<p>The <i>while loop</i> is a structure that\u2019s used to repeat something. It\u2019s used with a condition. The loop will repeat itself until the condition is false.</p>",translate:!0}},{image:{link:"./src/assets/images/EN-US/while.svg"}},{text:{value:"<p>To indicate the code that belongs in the body of the loop, you must indent the text. An example is shown below.</p><ol><li>Copy this code to the Programming Canvas.</li><li>Play the program and press the button on the Force Sensor.</li></ol>",translate:!0}},{snippet:{lines:[{line:"from spike import ForceSensor, Motor",translated:!1},{line:"# Initialize the Force Sensor, a motor, and a variable",translated:!0},{line:`force_sensor = ForceSensor('B')
motor = Motor('C')
count = 0`,translated:!1},{line:"# You can press the Force Sensor 5 times ",translated:!0},{line:`motor.set_default_speed(25)
while count &lt; 5:
	force_sensor.wait_until_pressed()
	motor.start()
	force_sensor.wait_until_released()
	motor.stop()
	count = count + 1`,translated:!1}]}},{text:{value:'<ol start="3"> <li>Change your code to explore another interaction with the sensor.</li> </ol>',translate:!0}},{snippet:{lines:[{line:"# This condition will always be true, so it will loop forever",translated:!0},{line:"while True:",translated:!1},{line:"	# Measure the force in newtons or as a percentage",translated:!0},{line:"	percentage = force_sensor.get_force_percentage()",translated:!1},{line:"	# Use the measured force to start the motor",translated:!0},{line:"	motor.start(percentage)",translated:!1}]}},{text:{value:"<p><span style='color: #0090F5'>To learn more about this, explore the <b>SPIKE Python Reference</b> section of this Knowledge Base.</span></p><br><hr style='border: 0.5px solid #EFEFEF;'><br>",translate:!0}}]}},{section:{title:"Part 5: Using the Color Sensor",translate:!0,components:[{title:{value:"Things You\u2019ll Need",translate:!0}},{image:{link:"./src/assets/images/motors-color.png"}},{text:{value:"<p>Connect a Color Sensor to Port F and 2 motors to Ports A and E.</p>",translate:!0}},{title:{value:"Yellow or violet?",translate:!0}},{text:{value:"<p>Let\u2019s use the Color Sensor to control the motors.</p><ol><li>Copy this code to the Programming Canvas.</li><li>Play the program. Present a violet brick or a yellow brick to the Color Sensor, then watch the motors.</li></ol>",translate:!0}},{snippet:{lines:[{line:"from spike import ColorSensor, Motor",translated:!1},{line:"from spike.control import Timer",translated:!1},{line:"# Initialize the Colour Sensor, 2 motors, and a Timer",translated:!0},{line:`color_sensor = ColorSensor('F')
motor_a = Motor('A')
motor_e = Motor('E')
timer = Timer()`,translated:!1},{line:"# Present each colored brick to the Color Sensor and observe what happens; it will detect each color for 30 seconds",translated:!0},{line:`while timer.now() &lt; 30:
	color = color_sensor.wait_for_new_color()
	if color == 'violet':
		motor_a.run_for_rotations(1)
	elif color == 'yellow':
		motor_e.run_for_rotations(1)`,translated:!1}]}},{text:{value:'<ol start="3"> <li>Change your code to explore another interaction with the sensor.</li> </ol>',translate:!0}},{snippet:{lines:[{line:"# This will use the reflected value of the colors to set the motor speed (yellow is approximately 80% and violet 60%)",translated:!0},{line:`while True:
	color = color_sensor.wait_for_new_color()
	percentage = color_sensor.get_reflected_light()
	if color == 'magenta':
		motor_a.run_for_rotations(1, percentage)
	elif color == 'yellow':
		motor_e.run_for_rotations(1, percentage)`,translated:!1}]}},{text:{value:"<p><span style='color: #0090F5'>To learn more about this, explore the <b>SPIKE Python Reference</b> section of this Knowledge Base.</span></p><br><hr style='border: 0.5px solid #EFEFEF;'><br>",translate:!0}}]}},{section:{title:"Part 6: Using the Distance Sensor",translate:!0,components:[{title:{value:"Things You\u2019ll Need",translate:!0}},{image:{link:"./src/assets/images/motor-distance.png"}},{text:{value:"<p>Connect a Distance Sensor to Port D and a motor to Port C.</p>",translate:!0}},{title:{value:"Closer or Farther",translate:!0}},{text:{value:"<p>Let\u2019s use the Distance Sensor to control the motor.</p><ol><li>Copy this code to the Programming Canvas.</li><li>Play the program and wave your hand over the Distance Sensor.</li></ol>",translate:!0}},{snippet:{lines:[{line:"from spike import DistanceSensor, Motor",translated:!1},{line:"# Initialize the Distance Sensor and motor",translated:!0},{line:`distance_sensor = DistanceSensor('D')
motor = Motor('C')`,translated:!1},{line:"# Move your hand slowly toward and then away from the Distance Sensor",translated:!0},{line:`while True:
	distance_sensor.wait_for_distance_farther_than(20, 'cm')
	motor.start()
	distance_sensor.wait_for_distance_closer_than(20, 'cm')
	motor.stop()`,translated:!1}]}},{text:{value:'<ol start="3"> <li>Change your code to explore another interaction with the sensor.</li> </ol>',translate:!0}},{snippet:{lines:[{line:"# Move your hand slowly toward and then away from the Distance Sensor, the motor speed will change based on the detected distance ",translated:!0},{line:`while True:
	percentage = distance_sensor.get_distance_percentage()
	if percentage is not None:
		motor.start(100 - percentage)`,translated:!1}]}},{text:{value:"<p><span style='color: #0090F5'>To learn more about this, explore the <b>SPIKE Python Reference</b> section of this Knowledge Base.</span></p><br><hr style='border: 0.5px solid #EFEFEF;'><br>",translate:!0}}]}},{section:{title:"Part 7: Using the Motion Sensor",translate:!0,components:[{title:{value:"Things You\u2019ll Need",translate:!0}},{image:{link:"./src/assets/images/hub-gyro.png"}},{text:{value:"<p>You\u2019ll only need the Hub, which you\u2019ll hold and tilt.</p>",translate:!0}},{title:{value:"Detect the Position",translate:!0}},{text:{value:"<p>Let\u2019s use the Hub\u2019s Motion Sensor to control the Light Matrix.</p><ol><li>Copy this code to the Programming Canvas.</li><li>Play the program and tilt the Hub left and right.</li></ol>",translate:!0}},{snippet:{lines:[{line:"from spike import PrimeHub, App",translated:!1},{line:"# Initialize the Hub and app",translated:!0},{line:`hub = PrimeHub()
app = App()`,translated:!1},{line:`
while True:
	orientation = hub.motion_sensor.wait_for_new_orientation()
	if orientation == 'front':
		hub.light_matrix.show_image('ASLEEP')
		app.start_sound('Snoring')
	elif orientation == 'up':
		hub.light_matrix.show_image('HAPPY')
		app.start_sound('Triumph')`,translated:!1}]}},{text:{value:'<ol start="3"> <li>Change your code to explore another interaction with the sensor.</li> </ol>',translate:!0}},{snippet:{lines:[{line:`while True:
	angle = abs(hub.motion_sensor.get_pitch_angle()) * 2
	hub.light_matrix.show_image('HAPPY', angle)`,translated:!1}]}},{title:{value:"Challenge",translate:!0}},{text:{value:"Use sensors to create a musical instrument that can modulate different sounds.",translate:!0}},{text:{value:"<p><span style='color: #0090F5'>To learn more about this, explore the <b>SPIKE Python Reference</b> section of this Knowledge Base.</span></p><br><hr style='border: 0.5px solid #EFEFEF;'><br>",translate:!0}}]}},{section:{title:"Part 8: Driving",translate:!0,components:[{title:{value:"Things You\u2019ll Need",translate:!0}},{image:{link:"./src/assets/images/simple-db.png"}},{text:{value:"<p>You\u2019ll need a Driving Base. You can build the model any way you like. The simplest option is to attach 2 motors to the Hub, facing in opposite directions. Connect some wheels, and you\u2019re ready to go! Visit the <i>Building Instructions</i> page for inspiration.</p>",translate:!0}},{title:{value:"Move Forward-Backward",translate:!0}},{text:{value:"<p>Let\u2019s program your Driving Base to move in straight lines.</p><ol><li>Copy this code to the Programming Canvas.</li><li>Play the program! Make sure that you have enough space for your Driving Base to move.</li></ol>",translate:!0}},{snippet:{lines:[{line:"from spike import MotorPair",translated:!1},{line:"# Initialize the motor pair",translated:!0},{line:"motor_pair = MotorPair('E', 'F')",translated:!1},{line:"# Initialize default speed",translated:!0},{line:"motor_pair.set_default_speed(50)",translated:!1},{line:"# Move in one direction for 2 seconds",translated:!0},{line:"motor_pair.move(2, 'seconds')",translated:!1}]}},{text:{value:'<ol start="3"> <li>Use this code to change your Driving Base\u2019s movement.</li> </ol>',translate:!0}},{snippet:{lines:[{line:"# Move in the other direction for 2 seconds",translated:!0},{line:`motor_pair.set_default_speed(-50)
motor_pair.move(2, 'seconds')`,translated:!1}]}},{title:{value:"Rotate a Driving Base (Point Turn)",translate:!0}},{text:{value:'<p>Are you driving straight but need to turn? Let\u2019s try what\u2019s called a "point turn." It will turn the Driving Base on a single point.</p><ol><li>Copy this code to the Programming Canvas.</li><li>Play the program! Make sure that you have enough space for your Driving Base to move.</li></ol>',translate:!0}},{snippet:{lines:[{line:"from spike import MotorPair",translated:!1},{line:"# Initialize the motor pair",translated:!0},{line:"motor_pair = MotorPair('E', 'F')",translated:!1},{line:"# Turn in one direction for 2 seconds",translated:!0},{line:"motor_pair.move_tank(10, 'cm', left_speed=25, right_speed=75)",translated:!1}]}},{text:{value:'<ol start="3"> <li>Use this code to change your Driving Base\u2019s movement.</li> </ol>',translate:!0}},{snippet:{lines:[{line:"# Move in the other direction for 2 seconds",translated:!0},{line:"motor_pair.move_tank(1, 'rotations', left_speed=-50, right_speed=50)",translated:!1}]}},{text:{value:"<p><span style='color: #0090F5'>To learn more about this, explore the <b>SPIKE Python Reference</b> section of this Knowledge Base.</span></p><br><hr style='border: 0.5px solid #EFEFEF;'><br>",translate:!0}},{title:{value:"Challenge",translate:!0}},{text:{value:"Here\u2019s a classic! Program your Driving Base to drive in a square using the functions you\u2019ve just tried.",translate:!0}}]}},{section:{title:"More Python Basics",translate:!0,components:[{text:{value:"<p>As a text-based programming language, Python is based on some principles that are worth further explanation.</p><ul><li>Flow Execution</li><li>Data Types</li><li>Classes, Methods, Objects</li><ul/></ul>",translate:!0}},{title:{value:"Flow Execution",translate:!0}},{text:{value:'<p>Remember that Python code is executed line-by-line. This is called the "flow of the execution."</p>',translate:!0}},{image:{link:"./src/assets/images/EN-US/flow.svg"}},{text:{value:"<p>There are many ways to modify that flow. For example, you can always pause the program\u2019s execution using the command <code>wait_for_seconds(1)</code> (the number specified in the ( ) is given in seconds). It will have this effect on the flow of execution:</p>",translate:!0}},{image:{link:"./src/assets/images/EN-US/delay.svg"}},{title:{value:"If/Else",translate:!0}},{text:{value:'<p>"If/else" structures allow you to modify the program\u2019s flow of execution. Effective use of the "if/else" structure is dependent on the ability to write and use good conditional statements. The program will check whether the condition is true. If so, it will execute the commands placed within the "if" structure. If not, it will execute the commands placed within the "else" structure.</p>',translate:!0}},{image:{link:"./src/assets/images/EN-US/if-else-sh.svg"}},{text:{value:"<p>To indicate the code that belongs in the body of the condition, you must indent the text.</p>",translate:!0}},{title:{value:"While Loop",translate:!0}},{text:{value:"<p>The <i>while loop</i> is a structure that\u2019s used to repeat something. It\u2019s used with a condition. The loop will repeat itself until the condition is false.</p>",translate:!0}},{image:{link:"./src/assets/images/EN-US/while.svg"}},{text:{value:"<p>Python often uses the <code>While true:</code> structure, which means that actions repeat indefinitely because the condition is always true.</p><p>To indicate the code that belongs in the body of the loop, you must indent the text. An example is shown below.</p>",translate:!0}},{title:{value:"Data Types",translate:!0}},{text:{value:"When using a text-based programming language, you\u2019ll have to experiment with different types of values. In the beginning, you\u2019ll mostly use numbers, strings, and lists.<ul><li>Numbers (integers): a positive or negative whole number, including 0</li></ul>",translate:!0}},{snippet:{lines:[{line:`my_integer = 7
print(my_integer)`,translated:!1}]}},{text:{value:"<ul><li>Numbers (float): a number with decimals</li></ul>",translate:!0}},{snippet:{lines:[{line:`my_float = 7.0
print(my_float)`,translated:!1}]}},{text:{value:"<ul><li>Strings (text): any characters</li></ul>",translate:!0}},{snippet:{lines:[{line:`my_string = 'Hello World'
print(my_string)`,translated:!1}]}},{text:{value:'<ul><li>Lists: multiple values bundled together, with each value accessible via an index, which starts at a value of "0"</li></ul>',translate:!0}},{snippet:{lines:[{line:`mylist = [1,2,3]
print(mylist[1])`,translated:!1}]}},{title:{value:"Class, Objects, Methods, Properties",translate:!0}},{text:{value:'<p>Python is an object-oriented programming language.</p><p>Here\u2019s how it works:</p><ul><li>In the SPIKE Prime library, we\u2019ve defined the electronic components that you\u2019re able to program. These have been grouped into <strong>classes</strong>. An example of this is the <i>Hub Class</i>, which defines everything you can do with the Hub.<br/><code>from spike import PrimeHub</code></li></ul><ul><li>To use a class, you must first make a copy of it. The action of making a copy is referred to as "making an object." It\u2019s done by initializing a component:<br/><code>my_own_hub_object = PrimeHub()</code></li></ul><ul><li>Now that you\u2019ve made a copy (i.e., object ) of a class, you can do lots of "things" with it. These "things" are referred to as <i>methods</i>, and sometimes <i>functions</i>. Methods sometimes have parameters, and sometimes they don\u2019t. Here\u2019s an example:</li></ul>',translate:!0}},{snippet:{lines:[{line:' # The method show_image() has a parameter called "happy"',translated:!0},{line:`my_own_hub_object.light_matrix.show_image('HAPPY')

`,translated:!1},{line:"# The method stop() has no parameter",translated:!0},{line:"motor.stop()",translated:!1}]}}]}},{section:{title:"Word Block Translator",translate:!0,components:[{text:{value:"These are the most common Word Blocks translated into SPIKE Python.",translate:!0}},{text:{value:'<br/>1. Beep Sound<br/><img src="./src/assets/images/EN-US/play-beep.svg"/>',translate:!0}},{snippet:{lines:[{line:"hub.speaker.beep(60, 0.2)",translated:!1}]}},{text:{value:'<br/>2. Play Sound<br/><img src="./src/assets/images/EN-US/play-sound.svg"/>',translate:!0}},{snippet:{lines:[{line:"app.play_sound('Cat Meow 1')",translated:!1}]}},{text:{value:'<br/>3. Light Matrix<br/><img src="./src/assets/images/EN-US/light-matrix.svg"/>',translate:!0}},{snippet:{lines:[{line:`hub.light_matrix.show_image('HAPPY')
	wait_for_seconds(2)`,translated:!1}]}},{text:{value:'<br/>4. Single Motor On for Seconds<br/><img src="./src/assets/images/EN-US/motor-sec.svg"/>',translate:!0}},{snippet:{lines:[{line:`motor = Motor('A')
motor.run_for_seconds(1, 75)`,translated:!1}]}},{text:{value:'<br/>5. Multiple Motors On for Degrees<br/><img src="./src/assets/images/EN-US/motors-degrees.svg"/>',translate:!0}},{snippet:{lines:[{line:`motor_a = Motor('A')
motor_e = Motor('E')
motor_a.run_for_rotation(1, 75)
motor_e.run_for_rotation(1, 75)`,translated:!1}]}},{text:{value:'<br/>6. Drive In Straight Line (Driving Base)<br/><img src="./src/assets/images/EN-US/drive.svg"/>',translate:!0}},{snippet:{lines:[{line:`motor_pair = MotorPair('E', 'F')
motor_pair.move(10, 'cm')`,translated:!1}]}},{text:{value:'<br/>7. Wait for 2 Seconds<br/><img src="./src/assets/images/EN-US/wait-2sec.svg"/>',translate:!0}},{snippet:{lines:[{line:"wait_for_seconds(2)",translated:!1}]}},{text:{value:'<br/>8. Wait for Force Sensor<br/><img src="./src/assets/images/EN-US/wait-press.svg"/>',translate:!0}},{snippet:{lines:[{line:"force_sensor.wait_until_pressed()",translated:!1}]}},{text:{value:'<br/>9. Repeat 10 Times<br/><img src="./src/assets/images/EN-US/repeat.svg"/>',translate:!0}},{snippet:{lines:[{line:`count = 0
while (count &lt; 10):
	count = count + 1
	hub.light_matrix.write(count)`,translated:!1}]}},{text:{value:'<br/>10. If... Else<br/><img src="./src/assets/images/EN-US/if-else.svg"/>',translate:!0}},{snippet:{lines:[{line:`color_sensor = ColorSensor('A')
while True:
	color = color_sensor.wait_for_new_color()
	if color == 'yellow':
		print('Yellow')
	else:
		print('Not Yellow')`,translated:!1}]}},{text:{value:'<br/>11. A Program<br/><div class="image"><img src="./src/assets/images/EN-US/hopper.svg"/></div>',translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub, MotorPair
from spike.control import wait_for_seconds

hub = PrimeHub()
motor_pair = MotorPair('F', 'C')
motor_pair.set_default_speed(50)

# 3
hub.light_matrix.off()
hub.light_matrix.set_pixel(1, 0)
hub.light_matrix.set_pixel(2, 0)
hub.light_matrix.set_pixel(3, 0)
hub.light_matrix.set_pixel(3, 1)
hub.light_matrix.set_pixel(1, 2)
hub.light_matrix.set_pixel(2, 2)
hub.light_matrix.set_pixel(3, 2)
hub.light_matrix.set_pixel(3, 3)
hub.light_matrix.set_pixel(1, 4)
hub.light_matrix.set_pixel(2, 4)
hub.light_matrix.set_pixel(3, 4)

wait_for_seconds(1)

# 2
hub.light_matrix.off()
hub.light_matrix.set_pixel(1, 0)
hub.light_matrix.set_pixel(2, 0)
hub.light_matrix.set_pixel(3, 0)
hub.light_matrix.set_pixel(3, 1)
hub.light_matrix.set_pixel(1, 2)
hub.light_matrix.set_pixel(2, 2)
hub.light_matrix.set_pixel(3, 2)
hub.light_matrix.set_pixel(1, 3)
hub.light_matrix.set_pixel(1, 4)
hub.light_matrix.set_pixel(2, 4)
hub.light_matrix.set_pixel(3, 4)

wait_for_seconds(1)

# 1
hub.light_matrix.off()
hub.light_matrix.set_pixel(2, 0)
hub.light_matrix.set_pixel(1, 1)
hub.light_matrix.set_pixel(2, 1)
hub.light_matrix.set_pixel(2, 2)
hub.light_matrix.set_pixel(2, 3)
hub.light_matrix.set_pixel(1, 4)
hub.light_matrix.set_pixel(2, 4)
hub.light_matrix.set_pixel(3, 4)

wait_for_seconds(1)
motor_pair.move(10, 'seconds')`,translated:!1}]}}]}},{section:{title:"Lesson 1: Pass the Brick",translate:!0,components:[{text:{value:'<p>Here\u2019s a lesson you can try in your classroom. After you\u2019ve completed some of the "getting started" steps, you can try out your Python coding skills in a classroom environment. This lesson, which uses Word Blocks, can also be found in the <i>Extra Resources</i> section of this app.</p><p>Have fun!</p>',translate:!0}},{title:{value:"Key Objectives",translate:!0}},{text:{value:"<p>In this lesson, your students will demonstrate their ability to work effectively and respectfully with different types of people while using Python to program a robotic hand.</p>",translate:!0}},{title:{value:"Do you belong to a team?",translate:!0}},{text:{value:"<p>Sports, music, dance, games... teams are found in all kinds of places. Does your team have a leader? What does your leader do?</p>",translate:!0}},{title:{value:"You have 5 minutes to build a robotic hand!",translate:!0}},{image:{link:"./src/assets/images/pass-the-brick/student-02.png"}},{text:{value:"<p>Challenge #1: Pick a team leader and follow their directions. Work as fast as you can to build:</p><ul><li>1 robotic hand</li></ul>You\u2019ll also need 6 LEGO<sup>\xAE</sup> bricks.",translate:!0}},{title:{value:"Try Out Your Robotic Hand",translate:!0}},{image:{link:"./src/assets/images/pass-the-brick/student-04.png"}},{text:{value:"<p>Play the program by pressing the Left Button on the Hub to test that your robotic hand closes.</p>",translate:!0}},{snippet:{lines:[{line:"from spike import Motor, PrimeHub ",translated:!1},{line:"# Initialize the Hub and motor",translated:!0},{line:`hub = PrimeHub()
motor = Motor('F')
`,translated:!1},{line:"# This will make the hand open once to start",translated:!0},{line:`motor.run_for_seconds(1, 75)

while True:`,translated:!1},{line:"	# This will make the hand close while you\u2019re pressing the Left Button on the Hub",translated:!0},{line:`	hub.left_button.wait_until_pressed()
	motor.set_stall_detection(False)
	motor.start(-75)

`,translated:!1},{line:"	# This will make the hand open when you release the Left Button on the Hub",translated:!0},{line:`	hub.left_button.wait_until_released()
	motor.set_stall_detection(True)

`,translated:!1},{line:"	# \u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191 # There\u2019s a missing a line of code here",translated:!0}]}},{title:{value:"Take control of your robotic hand!",translate:!0}},{text:{value:"<p>Complete the program to make your robotic hand open and close. It\u2019s missing a command that\u2019s needed for it to work correctly. (Hint: look at the comments in the program.) </p>",translate:!0}},{title:{value:"Move 6 Bricks in 2 Minutes",translate:!0}},{image:{link:"./src/assets/images/pass-the-brick/student-05.png"}},{text:{value:"<p>Challenge #2: Pick a new team leader and follow their directions.</p><p>You\u2019ll take turns using your robotic hand to move one brick at a time from point A to point B.</p>",translate:!0}},{title:{value:"Stack as Many Bricks as You Can In 3 Minutes",translate:!0}},{image:{link:"./src/assets/images/pass-the-brick/student-06.png"}},{text:{value:"<p>Challenge #3: It\u2019s time for another new team leader.</p><p>Follow their directions and take turns using your robotic hand to stack one brick on top of another.</p><p>Watch out! If you knock the tower over, you\u2019ll have to rebuild it.</p>",translate:!0}},{title:{value:"Move Bricks from One Place to Another",translate:!0}},{image:{link:"./src/assets/images/pass-the-brick/student-07.png"}},{text:{value:"<p>Challenge #4: Now pair up with another team and pick one leader.</p><p>Team A: Take turns using your robotic hand to pick up a brick. Meet halfway and pass the brick to the other team.</p><p>Team B: Take turns using only your robotic hand to grab the brick from the other team and deliver it to the designated spot.</p>",translate:!0}},{title:{value:"How did you do?",translate:!0}},{image:{link:"./src/assets/images/pass-the-brick/student-08.png"}},{text:{value:"<p>Think about what you've done well and what you could've done better.</p><p>Have you found new ways of improving your teamwork?</p>",translate:!0}}]}}]}},{category:{title:"App",translate:!0,components:[{text:{value:"To use the app, you must first initialize it.",translate:!0}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import App

`,translate:!1},{line:"# Initialize the app",translate:!0},{line:"app = App()",translate:!1}]}},{text:{value:"Following are all of the functions that are linked to the programmable elements of the SPIKE App.",translate:!0}},{section:{title:"play_sound()",translate:!1,components:[{title:{value:"play_sound(name, volume=100)",translate:!1}},{text:{value:"Plays a sound from the device (i.e., tablet or computer).",translate:!0}},{text:{value:"The program will not continue until the sound has finished playing.",translate:!0}},{text:{value:"If a sound with the specified name isn\u2019t found, nothing will happen.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"name",translate:!1},type:{text:{value:"Type",translate:!0},value:"String (text)",translate:!0},description:{value:"The name of the sound to play.",translate:!0},values:{text:{value:"Values",translate:!0},value:["Alert, Applause 1, Applause 2, Applause 3, Baa, Bang 1, Bang 2, Basketball Bounce, Big Boing, Bird, Bite, Boat Horn 1, Boat Horn 2, Bonk, Boom Cloud, Boop Bing Bop, Bowling Strike, Burp 1, Burp 2, Burp 3, Car Accelerate 1, Car Accelerating 2, Car Horn, Car Idle, Car Reverse, Car Skid 1, Car Skid 2, Car Vroom, Cat Angry, Cat Happy, Cat Hiss, Cat Meow 1, Cat Meow 2, Cat Meow 3, Cat Purring, Cat Whining, Chatter, Chirp, Clang, Clock Ticking, Clown Honk 1, Clown Honk 2, Clown Honk 3, Coin, Collect, Connect, Crank, Crazy Laugh, Croak, Crowd Gasp, Crunch, Cuckoo, Cymbal Crash, Disconnect, Dog Bark 1, Dog Bark 2, Dog Bark 3, Dog Whining 1, Dog Whining 2, Doorbell 1, Doorbell 2, Doorbell 3, Door Closing, Door Creek 1, Door Creek 2, Door Handle, Door Knock, Door Slam 1, Door Slam 2, Drum Roll, Dun Dun Dunnn, Emotional Piano, Fart 1, Fart 2, Fart 3, Footsteps, Gallop, Glass Breaking, Glug, Goal Cheer, Gong, Growl, Grunt, Hammer Hit, Head Shake, High Whoosh, Jump, Jungle Frogs, Laser 1, Laser 2, Laser 3, Laughing Baby 1, Laughing Baby 2, Laughing Boy, Laughing Crowd 1, Laughing Crowd 2, Laughing Girl, Laughing Male, Lose, Low Boing, Low Squeak, Low Whoosh, Magic Spell, Male Jump 1, Male Jump 2, Moo, Ocean Wave, Oops, Orchestra Tuning, Party Blower, Pew, Ping Pong Hit, Plane Flying By, Plane Motor Running, Plane Starting, Pluck, Police Siren 1, Police Siren 2, Police Siren 3, Punch, Rain, Ricochet, Rimshot, Ring Tone, Rip, Robot 1, Robot 2, Robot 3, Rocket Explosion Rumble, Rooster, Scrambling Feet, Screech, Seagulls, Service Announcement, Sewing Machine, Ship Bell, Siren Whistle, Skid, Slide Whistle 1, Slide Whistle 2, Sneaker Squeak, Snoring, Snort, Space Ambience, Space Flyby, Space Noise, Splash, Sport Whistle 1, Sport Whistle 2, Squeaky Toy, Squish Pop, Suction Cup, Tada, Telephone Ring 2, Telephone Ring, Teleport 2, Teleport 3, Teleport, Tennis Hit, Thunder Storm, Toliet Flush, Toy Honk, Toy Zing, Traffic, Train Breaks, Train Horn 1, Train Horn 2, Train Horn 3, Train On Tracks, Train Signal 1, Train Signal 2, Train Start, Train Whistle, Triumph, Tropical Birds, Wand, Water Drop, Whistle Thump, Whiz 1, Whiz 2, Window Breaks, Win, Wobble, Wood Tap, Zip"],translate:!1},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"volume",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The volume at which the sound will be played.",translate:!0},values:{text:{value:"Values",translate:!0},value:["0 to 100 %"],translate:!0},default:{text:{value:"Default",translate:!0},value:"100%",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"name is not a string or volume is not an integer.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The SPIKE App has been disconnected from the Hub.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import App

app = App()

app.play_sound('Cat Meow 1')`,translate:!1}]}}]}},{section:{title:"start_sound()",translate:!1,components:[{title:{value:"start_sound(name, volume=100)",translate:!1}},{text:{value:"Starts playing a sound from your device (i.e., tablet or computer).",translate:!0}},{text:{value:"The program will not wait for the sound to finish playing before proceeding to the next command.",translate:!0}},{text:{value:"If a sound with the specified name isn\u2019t found, nothing will happen.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"name",translate:!1},type:{text:{value:"Type",translate:!0},value:"String (text)",translate:!0},description:{value:"The name of the sound to play.",translate:!0},values:{text:{value:"Values",translate:!0},value:["Alert, Applause 1, Applause 2, Applause 3, Baa, Bang 1, Bang 2, Basketball Bounce, Big Boing, Bird, Bite, Boat Horn 1, Boat Horn 2, Bonk, Boom Cloud, Boop Bing Bop, Bowling Strike, Burp 1, Burp 2, Burp 3, Car Accelerate 1, Car Accelerating 2, Car Horn, Car Idle, Car Reverse, Car Skid 1, Car Skid 2, Car Vroom, Cat Angry, Cat Happy, Cat Hiss, Cat Meow 1, Cat Meow 2, Cat Meow 3, Cat Purring, Cat Whining, Chatter, Chirp, Clang, Clock Ticking, Clown Honk 1, Clown Honk 2, Clown Honk 3, Coin, Collect, Connect, Crank, Crazy Laugh, Croak, Crowd Gasp, Crunch, Cuckoo, Cymbal Crash, Disconnect, Dog Bark 1, Dog Bark 2, Dog Bark 3, Dog Whining 1, Dog Whining 2, Doorbell 1, Doorbell 2, Doorbell 3, Door Closing, Door Creek 1, Door Creek 2, Door Handle, Door Knock, Door Slam 1, Door Slam 2, Drum Roll, Dun Dun Dunnn, Emotional Piano, Fart 1, Fart 2, Fart 3, Footsteps, Gallop, Glass Breaking, Glug, Goal Cheer, Gong, Growl, Grunt, Hammer Hit, Head Shake, High Whoosh, Jump, Jungle Frogs, Laser 1, Laser 2, Laser 3, Laughing Baby 1, Laughing Baby 2, Laughing Boy, Laughing Crowd 1, Laughing Crowd 2, Laughing Girl, Laughing Male, Lose, Low Boing, Low Squeak, Low Whoosh, Magic Spell, Male Jump 1, Male Jump 2, Moo, Ocean Wave, Oops, Orchestra Tuning, Party Blower, Pew, Ping Pong Hit, Plane Flying By, Plane Motor Running, Plane Starting, Pluck, Police Siren 1, Police Siren 2, Police Siren 3, Punch, Rain, Ricochet, Rimshot, Ring Tone, Rip, Robot 1, Robot 2, Robot 3, Rocket Explosion Rumble, Rooster, Scrambling Feet, Screech, Seagulls, Service Announcement, Sewing Machine, Ship Bell, Siren Whistle, Skid, Slide Whistle 1, Slide Whistle 2, Sneaker Squeak, Snoring, Snort, Space Ambience, Space Flyby, Space Noise, Splash, Sport Whistle 1, Sport Whistle 2, Squeaky Toy, Squish Pop, Suction Cup, Tada, Telephone Ring 2, Telephone Ring, Teleport 2, Teleport 3, Teleport, Tennis Hit, Thunder Storm, Toliet Flush, Toy Honk, Toy Zing, Traffic, Train Breaks, Train Horn 1, Train Horn 2, Train Horn 3, Train On Tracks, Train Signal 1, Train Signal 2, Train Start, Train Whistle, Triumph, Tropical Birds, Wand, Water Drop, Whistle Thump, Whiz 1, Whiz 2, Window Breaks, Win, Wobble, Wood Tap, Zip"],translate:!1},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"volume",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The volume at which the sound will be played",translate:!0},values:{text:{value:"Values",translate:!0},value:["0 to 100 %"],translate:!0},default:{text:{value:"Default",translate:!0},value:"100%",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"name is not a string or volume is not an integer.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The SPIKE App has been disconnected from the Hub.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import App

app = App()

app.start_sound('Cat Meow 1')`,translate:!1}]}}]}}]}},{category:{title:"Buttons",translate:!0,components:[{text:{value:"Following are all of the functions that are linked to the programmable buttons (i.e., Left and Right Buttons) on the Hub.",translate:!0}},{title:{value:"Events",translate:!0}},{section:{title:"wait_until_pressed()",translate:!1,components:[{title:{value:"wait_until_pressed()",translate:!1}},{text:{value:"Waits until the button is pressed.",translate:!0}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

`,translate:!1},{line:"# Beep every time the Left Button is pressed",translate:!0},{line:`
while True:
    hub.left_button.wait_until_pressed()
    hub.speaker.start_beep()
    hub.left_button.wait_until_released()
    hub.speaker.stop()`,translate:!1}]}}]}},{section:{title:"wait_until_released()",translate:!1,components:[{title:{value:"wait_until_released()",translate:!1}},{text:{value:"Waits until the button is released.",translate:!0}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

`,translate:!1},{line:"# Beep every time the button is pressed",translate:!0},{line:`
while True:
    hub.left_button.wait_until_pressed()
    hub.speaker.start_beep()
    hub.left_button.wait_until_released()
    hub.speaker.stop()`,translate:!1}]}}]}},{section:{title:"was_pressed()",translate:!1,components:[{title:{value:"was_pressed()",translate:!1}},{text:{value:"Tests to see whether the button has been pressed since the last time this method called.",translate:!0}},{text:{value:'Once this method returns "true," the button must be released and pressed again before it will return "true" again.',translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"Boolean",translate:!0},description:{value:"if the button was pressed, otherwise",translate:!0},values:{text:{value:"Values",translate:!0},value:"True or False",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub
from spike.control import wait_for_seconds

hub = PrimeHub()

while True:
    wait_for_seconds(5)
    if hub.left_button.was_pressed():
`,translate:!1},{line:"        # Do something",translate:!0}]}}]}},{title:{value:"Measurements",translate:!0}},{section:{title:"is_pressed()",translate:!1,components:[{title:{value:"is_pressed()",translate:!1}},{text:{value:"Tests whether the button is pressed.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"Boolean",translate:!0},description:{value:"True if the button is pressed, otherwise false",translate:!0},values:{text:{value:"Values",translate:!0},value:"True or False",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

if hub.left_button.is_pressed():
`,translate:!1},{line:"    # Do something",translate:!0}]}}]}}]}},{category:{title:"Color Sensor",translate:!0,components:[{text:{value:"To use the Color Sensor, you must first initialize it.",translate:!0}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import ColorSensor

`,translate:!1},{line:"# Initialize the Color Sensor",translate:!0},{line:"color = ColorSensor('E')",translate:!1}]}},{text:{value:"Following are all of the functions that are linked to the Color Sensor.",translate:!0}},{title:{value:"Measurements",translate:!0}},{section:{title:"get_color()",translate:!1,components:[{title:{value:"get_color()",translate:!1}},{text:{value:"Retrieves the detected color of a surface.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"String (text)",translate:!0},description:{value:"Name of the color.",translate:!0},values:{text:{value:"Values",translate:!0},value:"'black','violet','blue','cyan','green','yellow','red','white',None",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The sensor has been disconnected from the Port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import ColorSensor

`,translate:!1},{line:"# Initialize the Color Sensor",translate:!0},{line:`
paper_scanner = ColorSensor('E')

`,translate:!1},{line:"# Measure the color",translate:!0},{line:`
color = paper_scanner.get_color()

`,translate:!1},{line:"# Print the color name to the console",translate:!0},{line:`
print('Detected:', color)

`,translate:!1},{line:"# Check if it's a specific color",translate:!0},{line:`
if color == 'red':
    print('It is red!')`,translate:!1}]}}]}},{section:{title:"get_ambient_light()",translate:!1,components:[{title:{value:"get_ambient_light()",translate:!1}},{text:{value:"Retrieves the intensity of the ambient light. <p>This causes the Color Sensor to change modes, which can affect your program in unexpected ways. For example,  the Color Sensor can't read colors when it's in ambient light mode.</p>",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The ambient light intensity.",translate:!0},values:{text:{value:"Values",translate:!0},value:"0 to 100 %",translate:!0}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The sensor has been disconnected from the Port.",translate:!1}}}]}]}},{section:{title:"get_reflected_light()",translate:!1,components:[{title:{value:"get_reflected_light()",translate:!1}},{text:{value:"Retrieves the intensity of the reflected light.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The reflected light intensity.",translate:!0},values:{text:{value:"Values",translate:!0},value:"0 to 100 %",translate:!0}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The sensor has been disconnected from the Port.",translate:!1}}}]}]}},{section:{title:"get_rgb_intensity()",translate:!1,components:[{title:{value:"get_rgb_intensity()",translate:!1}},{text:{value:"Retrieves the overall color intensity, and intensity of red, green, and blue.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"tuple of int",translate:!0},description:{value:"",translate:!0},values:{text:{value:"Values",translate:!0},value:"Red, green, blue, and overall intensity (0-1024)",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The sensor has been disconnected from the Port.",translate:!1}}}]}]}},{section:{title:"get_red()",translate:!1,components:[{title:{value:"get_red()",translate:!1}},{text:{value:"Retrieves the color intensity of red.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"",translate:!0},values:{text:{value:"Values",translate:!0},value:"0 to 1024",translate:!0}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The sensor has been disconnected from the Port.",translate:!1}}}]}]}},{section:{title:"get_green()",translate:!1,components:[{title:{value:"get_green()",translate:!1}},{text:{value:"Retrieves the color intensity of green.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"",translate:!0},values:{text:{value:"Values",translate:!0},value:"0 to 1024",translate:!0}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The sensor has been disconnected from the Port.",translate:!1}}}]}]}},{section:{title:"get_blue()",translate:!1,components:[{title:{value:"get_blue()",translate:!1}},{text:{value:"Retrieves the color intensity of blue.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"",translate:!0},values:{text:{value:"Values",translate:!0},value:"0 to 1024",translate:!0}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The sensor has been disconnected from the Port.",translate:!1}}}]}]}},{title:{value:"Events",translate:!0}},{section:{title:"wait_until_color()",translate:!1,components:[{title:{value:"wait_until_color(color)",translate:!1}},{text:{value:"Waits until the Color Sensor detects the specified color.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"color",translate:!1},type:{text:{value:"Type",translate:!0},value:"String (text)",translate:!0},description:{value:"The name of the color",translate:!0},values:{text:{value:"Values",translate:!0},value:['"black"','"violet"','"blue"','"cyan"','"green"','"yellow"','"red"','"white"',"None"]},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"color is not a string or None.",translate:!1}}},{error:{type:{value:"ValueError",translate:!1},description:{value:"color is not one of the allowed values.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The sensor has been disconnected from the Port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import ColorSensor

color_sensor = ColorSensor('A')

color_sensor.wait_until_color('blue')
`,translate:!1},{line:"# Add actions after this",translate:!0}]}}]}},{section:{title:"wait_for_new_color()",translate:!1,components:[{title:{value:"wait_for_new_color()",translate:!1}},{text:{value:"Waits until the Color Sensor detects a new color.",translate:!0}},{text:{value:"The first time this method is called, it immediately returns the detected color. After that, it waits until the Color Sensor detects a color that\u2019s different from the color that was detected the last time this method was used.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"String (text)",translate:!0},description:{value:"The name of the new color",translate:!0},values:{text:{value:"Values",translate:!0},value:"'black','violet','blue','cyan','green','yellow','red','white',None",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The sensor has been disconnected from the Port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import ColorSensor

color_sensor = ColorSensor('A')

while True:
    color = color_sensor.wait_for_new_color()
    if color == 'black':
        # For example, steer left
    elif color == 'white':
        # For example, steer right`,translate:!1}]}}]}},{title:{value:"Actions",translate:!0}},{section:{title:"light_up_all()",translate:!1,components:[{title:{value:"light_up_all(brightness=100)",translate:!1}},{text:{value:"Lights up all of the lights on the Color Sensor at the specified brightness.",translate:!0}},{text:{value:"This causes the Color Sensor to change modes, which can affect your program in unexpected ways. For example, the Color Sensor can't read colors when it's in light up mode.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"brightness",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The desired brightness of the lights on the Color Sensor.",translate:!0},values:{text:{value:"Values",translate:!0},value:['0 to 100% ("0" is off, and "100" is full brightness.)'],translate:!0},default:{text:{value:"Default",translate:!0},value:"100%",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"brightness is not an integer.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The sensor has been disconnected from the Port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import ColorSensor

color_sensor = ColorSensor('A')

`,translate:!1},{line:"# Turns on the Color Sensor's lights",translate:!0},{line:`
color_sensor.light_up_all()

`,translate:!1},{line:"# Turns off the Color Sensor's lights",translate:!0},{line:`
color_sensor.light_up_all(0)`,translate:!1}]}}]}},{section:{title:"light_up()",translate:!1,components:[{title:{value:"light_up(light_1, light_2, light_3)",translate:!1}},{text:{value:"Sets the brightness of the individual lights on the Color Sensor. <p>This causes the Color Sensor to change modes, which can affect your program in unexpected ways. For example, the Color Sensor can't read colors when it's in light up mode.</p>",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"light_1",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The desired brightness of light 1.",translate:!0},values:{text:{value:"Values",translate:!0},value:['0 to 100% ("0" is off, and "100" is full brightness.)'],translate:!0},default:{text:{value:"Default",translate:!0},value:"100%",translate:!0}}},{parameter:{param:{value:"light_2",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The desired brightness of light 2.",translate:!0},values:{text:{value:"Values",translate:!0},value:['0 to 100% ("0" is off, and "100" is full brightness.)'],translate:!0},default:{text:{value:"Default",translate:!0},value:"100%",translate:!0}}},{parameter:{param:{value:"light_3",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The desired brightness of light 3.",translate:!0},values:{text:{value:"Values",translate:!0},value:['0 to 100% ("0" is off, and "100" is full brightness.)'],translate:!0},default:{text:{value:"Default",translate:!0},value:"100%",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"light_1, light_2, or light_3 is not an integer.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The sensor has been disconnected from the Port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import ColorSensor

color_sensor = ColorSensor('A')

`,translate:!1},{line:"# Turn on one light (light_2) on the Color Sensor at full brightness",translate:!0},{line:`
color_sensor.light_up(0, 100, 0)`,translate:!1}]}}]}}]}},{category:{title:"Distance Sensor",translate:!0,components:[{text:{value:"To use the Distance Sensor, you must first initialize it.",translate:!0}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import DistanceSensor

`,translate:!1},{line:"# Initialize the Distance Sensor",translate:!0},{line:"distance = DistanceSensor('A')",translate:!1}]}},{text:{value:"Following are all of the functions that are linked to the Distance Sensor.",translate:!0}},{title:{value:"Actions",translate:!0}},{section:{title:"light_up_all()",translate:!1,components:[{title:{value:"light_up_all(brightness=100)",translate:!1}},{text:{value:"Lights up all of the lights on the Distance Sensor at the specified brightness.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"brightness",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The specified brightness of all of the lights.",translate:!0},values:{text:{value:"Values",translate:!0},value:['0 to 100% ("0" is off, and "100" is full brightness.)'],translate:!0},default:{text:{value:"Default",translate:!0},value:"100",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"brightness is not a number.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The sensor has been disconnected from the Port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import DistanceSensor

distance_sensor = DistanceSensor('A')

`,translate:!1},{line:"# Turn on the lights",translate:!0},{line:`
distance_sensor.light_up_all()

`,translate:!1},{line:`# Turn off the lights
`,translate:!0},{line:"distance_sensor.light_up_all(0)",translate:!1}]}}]}},{section:{title:"light_up()",translate:!1,components:[{title:{value:"light_up(right_top, left_top, right_bottom, left_bottom)",translate:!1}},{text:{value:"Sets the brightness of the individual lights on the Distance Sensor.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"right_top",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The brightness of the light that\u2019s above the right part of the Distance Sensor.",translate:!0},values:{text:{value:"Values",translate:!0},value:['0 to 100% ("0" is off, and "100" is full brightness.)'],translate:!0},default:{text:{value:"Default",translate:!0},value:"100",translate:!0}}},{parameter:{param:{value:"left_top",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The brightness of the light that\u2019s above the left part of the Distance Sensor.",translate:!0},values:{text:{value:"Values",translate:!0},value:['0 to 100% ("0" is off, and "100" is full brightness.)'],translate:!0},default:{text:{value:"Default",translate:!0},value:"100",translate:!0}}},{parameter:{param:{value:"right_bottom",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The brightness of the light that\u2019s below the right part of the Distance Sensor.",translate:!0},values:{text:{value:"Values",translate:!0},value:['0 to 100% ("0" is off, and "100" is full brightness.)'],translate:!0},default:{text:{value:"Default",translate:!0},value:"100",translate:!0}}},{parameter:{param:{value:"left_bottom",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The brightness of the light that\u2019s below the left part of the Distance Sensor.",translate:!0},values:{text:{value:"Values",translate:!0},value:['0 to 100% ("0" is off, and "100" is full brightness.)'],translate:!0},default:{text:{value:"Default",translate:!0},value:"100",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"right_top, left_top, right_bottom or left_bottom is not a number.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The sensor has been disconnected from the Port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import DistanceSensor

distance_sensor = DistanceSensor('A')

`,translate:!1},{line:"# Switch on the top lights of the Distance Sensor",translate:!0},{line:`
distance_sensor.light_up(100, 100, 0, 0)`,translate:!1}]}}]}},{title:{value:"Measurements",translate:!0}},{section:{title:"get_distance_cm()",translate:!1,components:[{title:{value:"get_distance_cm(short_range=False)",translate:!1}},{text:{value:"Retrieves the measured distance in centimeters.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"short_range",translate:!1},type:{text:{value:"Type",translate:!0},value:"boolean",translate:!1},description:{value:"Whether or not to use short range mode. Short range mode increases accuracy, but it can only detect nearby objects.",translate:!0},values:{text:{value:"Values",translate:!0},value:["True or False"],translate:!0},default:{text:{value:"Default",translate:!0},value:"False",translate:!0}}}]},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"float (decimal number)",translate:!0},description:{value:`The measured distance or "none" if the distance can't be measured.`,translate:!0},values:{text:{value:"Values",translate:!0},value:"0 to 200 cm",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"short_range is not a boolean.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The sensor has been disconnected from the Port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import DistanceSensor

`,translate:!1},{line:"# Initialize the Distance Sensor",translate:!0},{line:`
wall_detector = DistanceSensor('E')

`,translate:!1},{line:"# Measure the distances between the Distance Sensor and object in centimeters or inches",translate:!0},{line:`
dist_cm = wall_detector.get_distance_cm()
dist_inches = wall_detector.get_distance_inches()

`,translate:!1},{line:"# Print both results to the console",translate:!0},{line:`
print('cm:', dist_cm, 'Inches:', dist_inches)`,translate:!1}]}}]}},{section:{title:"get_distance_inches()",translate:!1,components:[{title:{value:"get_distance_inches(short_range=False)",translate:!1}},{text:{value:"Gets the measured distance in inches.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"short_range",translate:!1},type:{text:{value:"Type",translate:!0},value:"boolean",translate:!1},description:{value:"Whether or not to use short range mode. Short range mode increases accuracy, but it can only detect nearby objects.",translate:!0},values:{text:{value:"Values",translate:!0},value:["True or False"],translate:!0},default:{text:{value:"Default",translate:!0},value:"False",translate:!0}}}]},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"float (decimal number)",translate:!0},description:{value:`The measured distance or "none" if the distance can't be measured.`,translate:!0},values:{text:{value:"Values",translate:!0},value:"any value between 0 and 79",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"short_range is not a boolean.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The sensor has been disconnected from the Port.",translate:!1}}}]}]}},{section:{title:"get_distance_percentage()",translate:!1,components:[{title:{value:"get_distance_percentage(short_range=False)",translate:!1}},{text:{value:"Retrieves the measured distance as a percentage.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"short_range",translate:!1},type:{text:{value:"Type",translate:!0},value:"boolean",translate:!1},description:{value:"Whether or not to use short range mode. Short range mode increases accuracy, but it can only detect nearby objects.",translate:!0},values:{text:{value:"Values",translate:!0},value:["True or False"],translate:!0},default:{text:{value:"Default",translate:!0},value:"False",translate:!0}}}]},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:`The measured distance or "none" if the distance can't be measured.`,translate:!0},values:{text:{value:"Values",translate:!0},value:"any value between 0 and 100",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"short_range is not a boolean.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The sensor has been disconnected from the Port.",translate:!1}}}]}]}},{title:{value:"Events",translate:!0}},{section:{title:"wait_for_distance_farther_than()",translate:!1,components:[{title:{value:"wait_for_distance_farther_than(distance, unit='cm', short_range=False)",translate:!1}},{text:{value:"Waits until the measured distance is greater than the specified distance.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"distance",translate:!1},type:{text:{value:"Type",translate:!0},value:"float (decimal number)",translate:!1},description:{value:"The target distance to be detected from the sensor to an object.",translate:!0},values:{text:{value:"Values",translate:!0},value:["any value"],translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"unit",translate:!1},type:{text:{value:"Type",translate:!0},value:"String (text)",translate:!0},description:{value:"The unit in which the distance is measured.",translate:!0},values:{text:{value:"Values",translate:!0},value:['"cm"','"in"','"%"']},default:{text:{value:"Default",translate:!0},value:"cm",translate:!0}}},{parameter:{param:{value:"short_range",translate:!1},type:{text:{value:"Type",translate:!0},value:"boolean",translate:!1},description:{value:"Whether or not to use short range mode. Short range mode increases accuracy, but it can only detect nearby objects.",translate:!0},values:{text:{value:"Values",translate:!0},value:["True or False"],translate:!0},default:{text:{value:"Default",translate:!0},value:"False",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"distance is not a number or unit is not a string or short_range is not a boolean.",translate:!1}}},{error:{type:{value:"ValueError",translate:!1},description:{value:"unit is not one of the allowed values.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The sensor has been disconnected from the Port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import DistanceSensor

distance_sensor = DistanceSensor('A')

while True:
    distance_sensor.wait_for_distance_farther_than(20, 'cm')
    # do something, for example, start a motor
    distance_sensor.wait_for_distance_closer_than(20, 'cm')
    # do something, for example, stop a motor`,translate:!1}]}}]}},{section:{title:"wait_for_distance_closer_than()",translate:!1,components:[{title:{value:"wait_for_distance_closer_than(distance, unit='cm', short_range=False)",translate:!1}},{text:{value:"Waits until the measured distance is less than the specified distance.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"distance",translate:!1},type:{text:{value:"Type",translate:!0},value:"float (decimal number)",translate:!1},description:{value:"The target distance to be detected from the sensor to an object.",translate:!0},values:{text:{value:"Values",translate:!0},value:["any value"],translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"unit",translate:!1},type:{text:{value:"Type",translate:!0},value:"String (text)",translate:!0},description:{value:"The unit in which the distance is measured.",translate:!0},values:{text:{value:"Values",translate:!0},value:['"cm"','"in"','"%"']},default:{text:{value:"Default",translate:!0},value:"cm",translate:!0}}},{parameter:{param:{value:"short_range",translate:!1},type:{text:{value:"Type",translate:!0},value:"boolean",translate:!1},description:{value:"Whether or not to use short range mode. Short range mode increases accuracy, but it can only detect nearby objects.",translate:!0},values:{text:{value:"Values",translate:!0},value:["True or False"],translate:!0},default:{text:{value:"Default",translate:!0},value:"False",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"distance is not a number or unit is not a string or short_range is not a boolean.",translate:!1}}},{error:{type:{value:"ValueError",translate:!1},description:{value:"unit is not one of the allowed values. short_range is not a boolean.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The sensor has been disconnected from the Port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import DistanceSensor

distance_sensor = DistanceSensor('A')

while True:
    distance_sensor.wait_for_distance_farther_than(20, 'cm')
    # do something, for example, start a motor
    distance_sensor.wait_for_distance_closer_than(20, 'cm')
    # do something, for example, stop a motor`,translate:!1}]}}]}}]}},{category:{title:"Force Sensor",translate:!0,components:[{text:{value:"To use the Force Sensor, you must first initialize it.",translate:!0}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import ForceSensor

`,translate:!1},{line:"# Initialize the Force Sensor",translate:!0},{line:"force = ForceSensor('E')",translate:!1}]}},{text:{value:"Following are all of the functions that are linked to the Force Sensor.",translate:!0}},{title:{value:"Measurements",translate:!0}},{section:{title:"is_pressed()",translate:!1,components:[{title:{value:"is_pressed()",translate:!1}},{text:{value:"Tests whether the button on the sensor is pressed.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"Boolean",translate:!0},description:{value:"True if the button is pressed.",translate:!0},values:{text:{value:"Values",translate:!0},value:"True or False",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The Force Sensor has been disconnected from the port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import ForceSensor

`,translate:!1},{line:"# Initialize the Force Sensor",translate:!0},{line:`
door_bell = ForceSensor('E')

`,translate:!1},{line:"# Check whether the Force Sensor is pressed",translate:!0},{line:`
if door_bell.is_pressed():
    print('Hello!')`,translate:!1}]}}]}},{section:{title:"get_force_newton()",translate:!1,components:[{title:{value:"get_force_newton()",translate:!1}},{text:{value:"Retrieves the measured force, in newtons.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"float (decimal number)",translate:!0},description:{value:"The measured force, specified in newtons.",translate:!0},values:{text:{value:"Values",translate:!0},value:"between 0 and 10",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The Force Sensor has been disconnected from the port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import ForceSensor

`,translate:!1},{line:"# Initialize the Force Sensor",translate:!0},{line:`
door_bell = ForceSensor('E')

`,translate:!1},{line:"# Measure the force in newtons or as a percentage",translate:!0},{line:`
newtons = door_bell.get_force_newton()
percentage = door_bell.get_force_percentage()

`,translate:!1},{line:"# Print both results",translate:!0},{line:`
print('N:', newtons, '=', percentage, '%')

`,translate:!1},{line:"# Check whether the Force Sensor is pressed",translate:!0},{line:`
if door_bell.is_pressed():
    print('Hello!')`,translate:!1}]}}]}},{section:{title:"get_force_percentage()",translate:!1,components:[{title:{value:"get_force_percentage()",translate:!1}},{text:{value:"Retrieves the measured force as a percentage of the maximum force.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The measured force, given as a percentage.",translate:!0},values:{text:{value:"Values",translate:!0},value:"between 0 - 100%.",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The Force Sensor has been disconnected from the port.",translate:!1}}}]}]}},{title:{value:"Events",translate:!0}},{section:{title:"wait_until_pressed()",translate:!1,components:[{title:{value:"wait_until_pressed()",translate:!1}},{text:{value:"Waits until the Force Sensor is pressed.",translate:!0}},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The sensor has been disconnected from the port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import ForceSensor

force_sensor = ForceSensor('A')

while True:
    force_sensor.wait_until_pressed()
    # do something, for example, start a motor
    force_sensor.wait_until_released()
    # do something, for example, stop a motor`,translate:!1}]}}]}},{section:{title:"wait_until_released()",translate:!1,components:[{title:{value:"wait_until_released()",translate:!1}},{text:{value:"Waits until the Force Sensor is released.",translate:!0}},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The sensor has been disconnected from the Port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import ForceSensor

force_sensor = ForceSensor('A')

while True:
    force_sensor.wait_until_pressed()
    # do something, for example, start a motor
    force_sensor.wait_until_released()
    # do something, for example, stop a motor`,translate:!1}]}}]}}]}},{category:{title:"Light Matrix",translate:!0,components:[{text:{value:"Following are all of the functions that are linked to the Light Matrix.",translate:!0}},{title:{value:"Actions",translate:!0}},{section:{title:"show_image()",translate:!1,components:[{title:{value:"show_image(image, brightness=100)",translate:!1}},{text:{value:"Shows an image on the Light Matrix.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"image",translate:!1},type:{text:{value:"Type",translate:!0},value:"String (text)",translate:!0},description:{value:"Name of the image.",translate:!0},values:{text:{value:"Values",translate:!0},value:["ANGRY, ARROW_E, ARROW_N, ARROW_NE, ARROW_NW, ARROW_S, ARROW_SE, ARROW_SW, ARROW_W, ASLEEP, BUTTERFLY, CHESSBOARD, CLOCK1, CLOCK10, CLOCK11, CLOCK12, CLOCK2, CLOCK3, CLOCK4, CLOCK5, CLOCK6, CLOCK7, CLOCK8, CLOCK9, CONFUSED, COW, DIAMOND, DIAMOND_SMALL, DUCK, FABULOUS, GHOST, GIRAFFE, GO_RIGHT, GO_LEFT, GO_UP, GO_DOWN, HAPPY, HEART, HEART_SMALL, HOUSE, MEH, MUSIC_CROTCHET, MUSIC_QUAVER, MUSIC_QUAVERS, NO, PACMAN, PITCHFORK, RABBIT, ROLLERSKATE, SAD, SILLY, SKULL, SMILE, SNAKE, SQUARE, SQUARE_SMALL, STICKFIGURE, SURPRISED, SWORD, TARGET, TORTOISE, TRIANGLE, TRIANGLE_LEFT, TSHIRT, UMBRELLA, XMAS, YES"],translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"brightness",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"Brightness of the image",translate:!0},values:{text:{value:"Values",translate:!0},value:["0 to 100%"],translate:!0},default:{text:{value:"Default",translate:!0},value:"100",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"image is not a string or brightness is not an integer.",translate:!1}}},{error:{type:{value:"ValueError",translate:!1},description:{value:"image is not one of the allowed values.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub
from spike.control import wait_for_seconds

hub = PrimeHub()

hub.light_matrix.show_image('HAPPY')
wait_for_seconds(5)
hub.light_matrix.show_image('ASLEEP')
wait_for_seconds(5)`,translate:!1}]}}]}},{section:{title:"set_pixel()",translate:!1,components:[{title:{value:"set_pixel(x, y, brightness=100)",translate:!1}},{text:{value:"Sets the brightness of one pixel (one of the 25 LEDs) on the Light Matrix.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"x",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"Pixel position, counting from the left.",translate:!0},values:{text:{value:"Values",translate:!0},value:["1 to 5"],translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"y",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"Pixel position, counting from the top.",translate:!0},values:{text:{value:"Values",translate:!0},value:["1 to 5"],translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"brightness",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"Brightness of the pixel",translate:!0},values:{text:{value:"Values",translate:!0},value:["0 to 100%"],translate:!0},default:{text:{value:"Default",translate:!0},value:"100",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"x, y or brightness is not an integer.",translate:!1}}},{error:{type:{value:"ValueError",translate:!1},description:{value:"x, y is not within the allowed range of 0-4.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

hub.light_matrix.set_pixel(1, 4)`,translate:!1}]}}]}},{section:{title:"write()",translate:!1,components:[{title:{value:"write(text)",translate:!1}},{text:{value:"Displays text on the Light Matrix, one letter at a time, scrolling from right to left.",translate:!0}},{text:{value:"Your program will not continue until all of the letters have been shown.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"text",translate:!1},type:{text:{value:"Type",translate:!0},value:"String (text)",translate:!0},description:{value:"Text to write.",translate:!0},values:{text:{value:"Values",translate:!0},value:["Any text"],translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

hub.light_matrix.write('Hello!')

`,translate:!1},{line:'# Show the number "1" on the Light Matrix',translate:!0},{line:`
hub.light_matrix.write('1')`,translate:!1}]}}]}},{section:{title:"off()",translate:!1,components:[{title:{value:"off()",translate:!1}},{text:{value:"Turns off all of the pixels on the Light Matrix.",translate:!0}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

hub.light_matrix.off()`,translate:!1}]}}]}}]}},{category:{title:"Mathematical Functions",translate:!0,components:[{text:{value:"The math module provides some basic mathematical functions for working with floating-point numbers.",translate:!0}},{title:{value:"Functions",translate:!0}},{section:{title:"acos()",translate:!1,components:[{title:{value:"acos(x)",translate:!1}},{text:{value:'Returns the inverse cosine of "x."',translate:!0}}]}},{section:{title:"acosh()",translate:!1,components:[{title:{value:"acosh(x)",translate:!1}},{text:{value:'Returns the inverse hyperbolic cosine of "x."',translate:!0}}]}},{section:{title:"asin()",translate:!1,components:[{title:{value:"asin(x)",translate:!1}},{text:{value:'Returns the inverse sine of "x."',translate:!0}}]}},{section:{title:"asinh()",translate:!1,components:[{title:{value:"asinh(x)",translate:!1}},{text:{value:'Returns the inverse hyperbolic sine of "x."',translate:!0}}]}},{section:{title:"atan()",translate:!1,components:[{title:{value:"atan(x)",translate:!1}},{text:{value:'Returns the inverse tangent of "x."',translate:!0}}]}},{section:{title:"atan2()",translate:!1,components:[{title:{value:"atan2(y, x)",translate:!1}},{text:{value:'Returns the principal value of the inverse tangent of "y/x."',translate:!0}}]}},{section:{title:"atanh()",translate:!1,components:[{title:{value:"atanh(x)",translate:!1}},{text:{value:'Returns the inverse hyperbolic tangent of "x."',translate:!0}}]}},{section:{title:"ceil()",translate:!1,components:[{title:{value:"ceil(x)",translate:!1}},{text:{value:'Returns an integer ("x" rounded toward positive infinity).',translate:!0}}]}},{section:{title:"copysign()",translate:!1,components:[{title:{value:"copysign(x, y)",translate:!1}},{text:{value:'Returns "x" with the sign of "y."',translate:!0}}]}},{section:{title:"cos()",translate:!1,components:[{title:{value:"cos(x)",translate:!1}},{text:{value:'Returns the cosine of "x."',translate:!0}}]}},{section:{title:"cosh()",translate:!1,components:[{title:{value:"cosh(x)",translate:!1}},{text:{value:'Returns the hyperbolic cosine of "x."',translate:!0}}]}},{section:{title:"degrees()",translate:!1,components:[{title:{value:"degrees(x)",translate:!1}},{text:{value:"Returns radians \u2018x\u2019 converted to degrees.",translate:!0}}]}},{section:{title:"erf()",translate:!1,components:[{title:{value:"erf(x)",translate:!1}},{text:{value:'Returns the error function of "x."',translate:!0}}]}},{section:{title:"erfc()",translate:!1,components:[{title:{value:"erfc(x)",translate:!1}},{text:{value:'Returns the complementary error function of "x."',translate:!0}}]}},{section:{title:"exp()",translate:!1,components:[{title:{value:"exp(x)",translate:!1}},{text:{value:'Returns the exponential of "x."',translate:!0}}]}},{section:{title:"expm1()",translate:!1,components:[{title:{value:"expm1(x)",translate:!1}},{text:{value:"Returns exp(x) - 1.",translate:!0}}]}},{section:{title:"fabs()",translate:!1,components:[{title:{value:"fabs(x)",translate:!1}},{text:{value:'Returns the absolute value of "x."',translate:!0}}]}},{section:{title:"floor()",translate:!1,components:[{title:{value:"floor(x)",translate:!1}},{text:{value:'Returns an integer ("x" rounded toward negative infinity).',translate:!0}}]}},{section:{title:"fmod()",translate:!1,components:[{title:{value:"fmod(x, y)",translate:!1}},{text:{value:'Returns the remainder of "x/y."',translate:!0}}]}},{section:{title:"frexp()",translate:!1,components:[{title:{value:"frexp(x)",translate:!1}},{text:{value:"Decomposes a floating-point number into its mantissa and exponent. The Returned value is the tuple (m, e) such that x == m * 2**e exactly. If x == 0, the function Returns (0.0, 0). Otherwise, the relation 0.5 &lt;= abs(m) &lt; 1 holds.",translate:!0}}]}},{section:{title:"gamma()",translate:!1,components:[{title:{value:"gamma(x)",translate:!1}},{text:{value:'Returns the gamma function of "x."',translate:!0}}]}},{section:{title:"isfinite()",translate:!1,components:[{title:{value:"isfinite(x)",translate:!1}},{text:{value:'Returns "true" if "x" is finite.',translate:!0}}]}},{section:{title:"isinf()",translate:!1,components:[{title:{value:"isinf(x)",translate:!1}},{text:{value:'Returns "true"  if "x" is infinite.',translate:!0}}]}},{section:{title:"isnan()",translate:!1,components:[{title:{value:"isnan(x)",translate:!1}},{text:{value:'Returns "true" if "x"  is not-a-number',translate:!0}}]}},{section:{title:"ldexp()",translate:!1,components:[{title:{value:"ldexp(x, exp)",translate:!1}},{text:{value:"Returns x * (2**exp).",translate:!0}}]}},{section:{title:"lgamma()",translate:!1,components:[{title:{value:"lgamma(x)",translate:!1}},{text:{value:'Returns the natural logarithm of the gamma function of "x."',translate:!0}}]}},{section:{title:"log()",translate:!1,components:[{title:{value:"log(x)",translate:!1}},{text:{value:'Returns the natural logarithm of "x."',translate:!0}}]}},{section:{title:"log10()",translate:!1,components:[{title:{value:"log10(x)",translate:!1}},{text:{value:'Returns the base-10 logarithm of "x."',translate:!0}}]}},{section:{title:"log2()",translate:!1,components:[{title:{value:"log2(x)",translate:!1}},{text:{value:'Returns the base-2 logarithm of "x."',translate:!0}}]}},{section:{title:"modf()",translate:!1,components:[{title:{value:"modf(x)",translate:!1}},{text:{value:'Returns a tuple of two floats (the fractional and integral parts of "x"). Both Returned values have the same sign as "x."',translate:!0}}]}},{section:{title:"pow()",translate:!1,components:[{title:{value:"pow(x, y)",translate:!1}},{text:{value:'Returns "x" to the power of "y."',translate:!0}}]}},{section:{title:"radians()",translate:!1,components:[{title:{value:"radians(x)",translate:!1}},{text:{value:'Returns "degrees x" converted to radians.',translate:!0}}]}},{section:{title:"sin()",translate:!1,components:[{title:{value:"sin(x)",translate:!1}},{text:{value:'Returns the sine of "x."',translate:!0}}]}},{section:{title:"sinh()",translate:!1,components:[{title:{value:"sinh(x)",translate:!1}},{text:{value:'Returns the hyperbolic sine of "x."',translate:!0}}]}},{section:{title:"sqrt()",translate:!1,components:[{title:{value:"sqrt(x)",translate:!1}},{text:{value:'Returns the square root of "x."',translate:!0}}]}},{section:{title:"tan()",translate:!1,components:[{title:{value:"tan(x)",translate:!1}},{text:{value:'Returns the tangent of "x."',translate:!0}}]}},{section:{title:"tanh()",translate:!1,components:[{title:{value:"tanh(x)",translate:!1}},{text:{value:'Returns the hyperbolic tangent of "x."',translate:!0}}]}},{section:{title:"trunc()",translate:!1,components:[{title:{value:"trunc(x)",translate:!1}},{text:{value:'Returns an integer ("x" rounded toward "0").',translate:!0}}]}},{title:{value:"Constants",translate:!0}},{section:{title:"e",translate:!1,components:[{title:{value:"e",translate:!1}},{text:{value:"The mathematical constant e = 2.718281\u2026 with available precision.",translate:!0}}]}},{section:{title:"pi",translate:!1,components:[{title:{value:"pi",translate:!1}},{text:{value:"The mathematical constant \u03C0 = 3.141592\u2026 to available precision.",translate:!0}}]}}]}},{category:{title:"Motion Sensor",translate:!0,components:[{text:{value:"Following are all of the functions that are linked to the Hub\u2019s Motion Sensor, which combines a three-axis accelerometer and a three-axis gyroscope.",translate:!0}},{title:{value:"Events",translate:!0}},{section:{title:"was_gesture()",translate:!1,components:[{title:{value:"was_gesture(gesture)",translate:!1}},{text:{value:"Tests whether a gesture has occurred since the last time was_gesture() was used, or since the beginning of the program (for the first use).",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"gesture",translate:!1},type:{text:{value:"Type",translate:!0},value:"String (text)",translate:!0},description:{value:"The name of the gesture.",translate:!0},values:{text:{value:"Values",translate:!0},value:['"shaken"','"tapped"','"double-tapped"','"falling"','"none"']},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"gesture is not a string.",translate:!1}}},{error:{type:{value:"ValueError",translate:!1},description:{value:"gesture is not one of the allowed values.",translate:!1}}}]},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"Boolean",translate:!0},description:{value:"True if the gesture has occurred since the last time was_gesture() was called, otherwise false.",translate:!0},values:{text:{value:"Values",translate:!0},value:"True or False",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub
from spike.control import wait_for_seconds

hub = PrimeHub()

wait_for_seconds(5)
if hub.motion_sensor.was_gesture('shaken'):
    # the Hub was shaken some time within the last 5 seconds`,translate:!1}]}}]}},{section:{title:"wait_for_new_gesture()",translate:!1,components:[{title:{value:"wait_for_new_gesture()",translate:!1}},{text:{value:"Waits until a new gesture happens.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"String (text)",translate:!0},description:{value:"The new gesture.",translate:!0},values:{text:{value:"Values",translate:!0},value:"'shaken','tapped','doubletapped','falling'",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

gesture = hub.motion_sensor.wait_for_new_gesture()
if gesture == 'shaken':
    # do one thing
elif gesture == 'tapped':
    # do another thing`,translate:!1}]}}]}},{section:{title:"wait_for_new_orientation()",translate:!1,components:[{title:{value:"wait_for_new_orientation()",translate:!1}},{text:{value:"Waits until the Hub\u2019s orientation changes.",translate:!0}},{text:{value:"The first time this method is called, it will immediately return the current value. After that, calling this method will block the program until the Hub\u2019s orientation has changed since the previous time this method was called.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"String (text)",translate:!0},description:{value:"The Hub\u2019s new orientation.",translate:!0},values:{text:{value:"Values",translate:!0},value:"'front', 'back', 'up', 'down', 'leftside', 'rightside'",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

orientation = hub.motion_sensor.wait_for_new_orientation()
if orientation == 'leftside':
    # do one thing
elif orientation == 'rightside':
    # do another thing`,translate:!1}]}}]}},{title:{value:"Measurement",translate:!0}},{section:{title:"get_orientation()",translate:!1,components:[{title:{value:"get_orientation()",translate:!1}},{text:{value:"Retrieves the Hub's current orientation.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"String (text)",translate:!0},description:{value:"The Hub\u2019s current orientation.",translate:!0},values:{text:{value:"Values",translate:!0},value:"'front','back','up','down','leftside','rightside'",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

if hub.motion_sensor.get_orientation() == 'front':
    # do something`,translate:!1}]}}]}},{section:{title:"get_gesture()",translate:!1,components:[{title:{value:"get_gesture()",translate:!1}},{text:{value:"Retrieves the most recently-detected gesture.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"String (text)",translate:!0},description:{value:"The gesture.",translate:!0},values:{text:{value:"Values",translate:!0},value:"'shaken','tapped','doubletapped','falling'",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

while True:
	if hub.motion_sensor.get_gesture() == 'falling':
		print("Aaah!")`,translate:!1}]}}]}},{section:{title:"get_roll_angle()",translate:!1,components:[{title:{value:"get_roll_angle()",translate:!1}},{text:{value:"Retrieves the Hub\u2019s roll angle.",translate:!0}},{text:{value:"<i>Roll </i>is the rotation around the front-back (longitudinal) axis. <i>Yaw</i> is the rotation around the front-back (vertical) axis. <i>Pitch</i> is the rotation around the left-right (transverse) axis.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"Integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The roll angle, specified in degrees.",translate:!0},values:{text:{value:"Values",translate:!0},value:"-180 to 180",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

if hub.motion_sensor.get_roll_angle() &gt; 90:
    # do something`,translate:!1}]}}]}},{section:{title:"get_pitch_angle()",translate:!1,components:[{title:{value:"get_pitch_angle()",translate:!1}},{text:{value:"Retrieves the Hub\u2019s pitch angle.",translate:!0}},{text:{value:"<i>Pitch</i> is the rotation around the left-right (transverse) axis. <i>Roll </i>is the rotation around the front-back (longitudinal) axis. <i>Yaw</i> is the rotation around the front-back (vertical) axis.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"Integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The pitch angle, specified in degrees.",translate:!0},values:{text:{value:"Values",translate:!0},value:"-180 to 180",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

if hub.motion_sensor.get_pitch_angle() &gt; 90:
    # do something`,translate:!1}]}}]}},{section:{title:"get_yaw_angle()",translate:!1,components:[{title:{value:"get_yaw_angle()",translate:!1}},{text:{value:"Retrieves the Hub\u2019s yaw angle.",translate:!0}},{text:{value:"<i>Yaw</i> is the rotation around the front-back (vertical) axis. <i>Pitch</i> the is rotation around the left-right (transverse) axis. <i>Roll</i> the is rotation around the front-back (longitudinal) axis.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"Integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The yaw angle, specified in degrees.",translate:!0},values:{text:{value:"Values",translate:!0},value:"-180 to 180",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

if hub.motion_sensor.get_yaw_angle() &gt; 90:
    # do something`,translate:!1}]}}]}},{title:{value:"Settings",translate:!0}},{section:{title:"reset_yaw_angle()",translate:!1,components:[{title:{value:"reset_yaw_angle()",translate:!1}},{text:{value:'Sets the yaw angle to "0."',translate:!0}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

hub.motion_sensor.reset_yaw_angle()
angle = hub.motion_sensor.get_yaw_angle()
print('Angle:', angle)
`,translate:!1},{line:"# Angle is now 0",translate:!0}]}}]}}]}},{category:{title:"Motor Pairs",translate:!0,components:[{text:{value:"MotorPair objects are used to control 2 motors simultaneously in opposite directions.",translate:!0}},{text:{value:"To be able to use MotorPair, you must initialize both motors.",translate:!0}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import MotorPair

`,translate:!1},{line:`# If the left motor is connected to Port B
`,translate:!0},{line:"# And the right motor is connected to Port A",translate:!0},{line:"motor_pair = MotorPair('B', 'A')",translate:!1}]}},{title:{value:"Actions",translate:!0}},{section:{title:"move()",translate:!1,components:[{title:{value:"move(amount, unit='cm', steering=0, speed=None)",translate:!1}},{text:{value:"Start both motors simultaneously to move a Driving Base.",translate:!0}},{text:{value:'Steering = "0" makes the Driving Base go straight. Negative numbers make the Driving Base turn left. Positive numbers make the Driving Base turn right.',translate:!0}},{text:{value:"The program will not continue until the specified value is reached.",translate:!0}},{text:{value:'If the value of steering is equal to "-100" or "100," the Driving Base will perform a rotation on itself (i.e., "tank move") at the default speed of each motor.',translate:!0}},{text:{value:'If the value of steering is outside of the allowed range, the value will be set to "-100" or "100," depending on whether the value is positive or negative.',translate:!0}},{text:{value:'If speed is outside of the allowed range, the value will be set to "-100" or "100," depending on whether the value is positive or negative.',translate:!0}},{text:{value:'If the speed is negative, the Driving Base will move backward instead of forward. Likewise, if the "amount" is negative, the Driving Base will move backward instead of forward. If both the speed and the "amount" are negative, the Driving Base will move forward.',translate:!0}},{text:{value:'When the specified unit is "cm" or "in," the "amount" of the unit parameter is equal to the horizontal distance that the Driving Base will travel before stopping. The relationship between the motor rotations and distance traveled can be adjusted by calling set_motor_rotation().',translate:!0}},{text:{value:'When the "unit" is "rotations" or "degrees," the "amount" parameter value specifies how much the motor axle will turn before stopping.',translate:!0}},{text:{value:'When the "unit" is "seconds," the "amount" parameter value specifies the duration that the motors will run before stopping.',translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"amount",translate:!1},type:{text:{value:"Type",translate:!0},value:"float (decimal numbers)",translate:!1},description:{value:"The quantity to move in relation to the specified unit of measurement.",translate:!0},values:{text:{value:"Values",translate:!0},value:["any value"],translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"unit",translate:!1},type:{text:{value:"Type",translate:!0},value:"String (text)",translate:!0},description:{value:'The unit of measurement specified for the "amount" parameter.',translate:!0},values:{text:{value:"Values",translate:!0},value:['"cm"','"in"','"rotations"','"degrees"','"seconds"']},default:{text:{value:"Default",translate:!0},value:"cm",translate:!0}}},{parameter:{param:{value:"steering",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The direction and quantity to steer the Driving Base.",translate:!0},values:{text:{value:"Values",translate:!0},value:["-100 to 100"],translate:!0},default:{text:{value:"Default",translate:!0},value:"0",translate:!0}}},{parameter:{param:{value:"speed",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The motor speed.",translate:!0},values:{text:{value:"Values",translate:!0},value:["-100 to 100"],translate:!0},default:{text:{value:"Default",translate:!0},value:"the speed set by set_default_speed()",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"amount is not a number, or steering or speed is not an integer, or unit is not a string.",translate:!1}}},{error:{type:{value:"ValueError",translate:!1},description:{value:"unit is not one of the allowed values.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"One or both of the motors has been disconnected or the motors could not be paired.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`import math
from spike import MotorPair

motor_pair = MotorPair('B', 'A')

`,translate:!1},{line:"# turn a Driving Base 180 degrees in place (if wheels are 8.1 cm apart)",translate:!0},{line:`
motor_pair.move(8.1 * math.pi / 2, 'cm', steering=100)`,translate:!1}]}}]}},{section:{title:"start()",translate:!1,components:[{title:{value:"start(steering=0, speed=None)",translate:!1}},{text:{value:"Start both motors simultaneously to move a Driving Base.",translate:!0}},{text:{value:'Steering = "0" makes the Driving Base go straight. Negative numbers make the Driving Base turn left. Positive numbers make the Driving Base turn right.',translate:!0}},{text:{value:"The program flow is not interrupted. This is most likely interrupted by sensor input and a condition.",translate:!0}},{text:{value:'If the value of steering is equal to "-100" or "100," the Driving Base will perform a rotation on itself (i.e., "tank move") at the default speed of each motor.',translate:!0}},{text:{value:'If the value of "steering" is outside of the allowed range, the value will be set to "-100" or "100," depending on whether the value is positive or negative.',translate:!0}},{text:{value:'If speed is outside of the allowed range, the value will be set to "-100" or "100," depending on whether the value is positive or negative.',translate:!0}},{text:{value:'If the speed is negative, the Driving Base will move backward instead of forward. Likewise, if the "amount" is negative, the Driving Base will move backward instead of forward. If both the speed and the "amount" are negative, the Driving Base will move forward.',translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"steering",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The direction and quantity to steer the Driving Base.",translate:!0},values:{text:{value:"Values",translate:!0},value:["-100 to 100"],translate:!0},default:{text:{value:"Default",translate:!0},value:"0",translate:!0}}},{parameter:{param:{value:"speed",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The speed at which the Driving Base will move while performing a curve.",translate:!0},values:{text:{value:"Values",translate:!0},value:["-100 to 100%"],translate:!0},default:{text:{value:"Default",translate:!0},value:"If no value is specified, it will use the default speed that\u2019s been set by set_default_speed().",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"steering or speed is not an integer.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"One or both of the motors has been disconnected or the motors could not be paired.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import MotorPair

motor_pair = MotorPair('B', 'A')

motor_pair.start()
`,translate:!1},{line:"# wait for something",translate:!0},{line:`
motor_pair.stop()`,translate:!1}]}}]}},{section:{title:"stop()",translate:!1,components:[{title:{value:"stop()",translate:!1}},{text:{value:"Stops both motors simultaneously, which will stop a Driving Base.",translate:!0}},{text:{value:"The motors will either actively hold their current position or coast freely depending on the option that\u2019s been selected by set_stop_action().",translate:!0}},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"RuntimeError",translate:!1},description:{value:"One or both of the motors has been disconnected or the motors could not be paired.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import MotorPair

motor_pair = MotorPair('B', 'A')

motor_pair.start()
`,translate:!1},{line:"# wait for something",translate:!0},{line:`
motor_pair.stop()`,translate:!1}]}}]}},{section:{title:"move_tank()",translate:!1,components:[{title:{value:"move_tank(amount, unit='cm', left_speed=None, right_speed=None)",translate:!1}},{text:{value:"Moves the Driving Base using differential (tank) steering.",translate:!0}},{text:{value:"The speed of each motor can be controlled independently for differential (tank) drive Driving Bases.",translate:!0}},{text:{value:'When the specified unit is "cm" or "in," the "amount" of the unit parameter is equal to the horizontal distance that the Driving Base will travel before stopping. The relationship between the motor rotations and distance traveled can be adjusted by calling set_motor_rotation().',translate:!0}},{text:{value:'When the "unit" is "rotations" or "degrees," the "amount" parameter value specifies how much the motor axle will turn before stopping.',translate:!0}},{text:{value:'When the "unit" is "seconds," the "amount" parameter value specifies the duration that the motors will run before stopping.',translate:!0}},{text:{value:'If left_speed or right_speed is outside of the allowed range, the value will be set to "-100" or "100" depending on whether the value is positive or negative.',translate:!0}},{text:{value:'If one of the speeds (i.e., left_speed or right_speed) is negative, the negative-speed motor will run backward instead of forward. If the "amount" parameter value is negative, both motors will rotate backward instead of forward. If both of the speed values (i.e., left_speed and right_speed) are negative and the "amount" parameter value is negative, both motors will rotate forward.',translate:!0}},{text:{value:"The program will not continue until the specified value is reached.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"amount",translate:!1},type:{text:{value:"Type",translate:!0},value:"float (decimal number)",translate:!1},description:{value:"The quantity to move in relation to the specified unit of measurement.",translate:!0},values:{text:{value:"Values",translate:!0},value:["any value"],translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"unit",translate:!1},type:{text:{value:"Type",translate:!0},value:"String (text)",translate:!0},description:{value:'The unit of measurement specified for the "amount" parameter.',translate:!0},values:{text:{value:"Values",translate:!0},value:['"cm"','"in"','"rotations"','"degrees"','"seconds"']},default:{text:{value:"Default",translate:!0},value:"cm",translate:!0}}},{parameter:{param:{value:"left_speed",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The speed of the left motor.",translate:!0},values:{text:{value:"Values",translate:!0},value:["-100 to 100"],translate:!0},default:{text:{value:"Default",translate:!0},value:"the speed set by set_default_speed()",translate:!0}}},{parameter:{param:{value:"right_speed",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The speed of the right motor.",translate:!0},values:{text:{value:"Values",translate:!0},value:["-100 to 100"],translate:!0},default:{text:{value:"Default",translate:!0},value:"the speed set by set_default_speed()",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"amount, left_speed or right_speed is not a number or unit is not a string.",translate:!1}}},{error:{type:{value:"ValueError",translate:!1},description:{value:"unit is not one of the allowed values.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"One or both of the Ports do not have a motor connected or the motors could not be paired.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import MotorPair

motor_pair = MotorPair('B', 'A')
motor_pair.move_tank(10, 'cm', left_speed=25, right_speed=75)`,translate:!1}]}}]}},{section:{title:"start_tank()",translate:!1,components:[{title:{value:"start_tank(left_speed, right_speed)",translate:!1}},{text:{value:"Starts moving the Driving Base using differential (tank) steering.",translate:!0}},{text:{value:"The speed of each motor can be controlled independently for differential (tank) drive Driving Bases.",translate:!0}},{text:{value:'If left_speed or right_speed is outside of the allowed range, the value will be set to "-100" or "100" depending on whether the value is positive or negative.',translate:!0}},{text:{value:"If the speed is negative, the motors will move backward instead of forward.",translate:!0}},{text:{value:"The program flow is not interrupted. This is most likely interrupted by sensor input and a condition.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"left_speed",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The speed of the left motor.",translate:!0},values:{text:{value:"Values",translate:!0},value:["-100 to 100"],translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"right_speed",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The speed of the right motor.",translate:!0},values:{text:{value:"Values",translate:!0},value:["-100 to 100"],translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"left_speed or right_speed is not an integer.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"One or both of the Ports do not have a motor connected or the motors could not be paired.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import MotorPair

motor_pair = MotorPair('B', 'A')

`,translate:!1},{line:"# Rotate the Driving Base in place to the right",translate:!0},{line:`
motor_pair.start_tank(100, -100)`,translate:!1}]}}]}},{section:{title:"start_at_power()",translate:!1,components:[{title:{value:"start_at_power(power, steering=0)",translate:!1}},{text:{value:"Starts moving the Driving Base without speed control.",translate:!0}},{text:{value:"The motors can also be driven without speed control. This is useful when using your own control algorithm (e.g., a proportional line-follower).",translate:!0}},{text:{value:'If the steering is outside of the allowed range, the value will be set to "-100" or "100" depending on whether the value is positive or negative.',translate:!0}},{text:{value:'If the power is outside of the allowed range, the value will be set to "-100" or "100" depending on whether the value is positive or negative.',translate:!0}},{text:{value:"If the power is negative, the Driving Base will move backward instead of forward.",translate:!0}},{text:{value:"The program flow is not interrupted. This can most likely be interrupted by sensor input and a condition.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"power",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The amount of power to send to the motors.",translate:!0},values:{text:{value:"Values",translate:!0},value:["-100 to 100%"],translate:!0},default:{text:{value:"Default",translate:!0},value:"100",translate:!0}}},{parameter:{param:{value:"steering",translate:!1},type:{text:{value:"Type",translate:!0},value:"Integer",translate:!1},description:{value:'The steering direction (-100 to 100). "0" makes the Driving Base move straight. Negative numbers make the Driving Base turn left. Positive numbers make the Driving Base turn right.',translate:!0},values:{text:{value:"Values",translate:!0},value:["-100 to 100"],translate:!0},default:{text:{value:"Default",translate:!0},value:"0",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"steering or power is not an integer.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"One or both of the Ports do not have a motor connected or the motors could not be paired.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import MotorPair, ColorSensor

motor_pair = MotorPair('B', 'A')
color_sensor = ColorSensor('F')

while True:
    steering = color_sensor.get_reflected_light() - 50
    motor_pair.start_at_power(50, steering)`,translate:!1}]}}]}},{section:{title:"start_tank_at_power()",translate:!1,components:[{title:{value:"start_tank_at_power(left_power, right_power)",translate:!1}},{text:{value:"Starts moving the Driving Base using differential (tank) steering without speed control.",translate:!0}},{text:{value:"The motors can also be driven without speed control. This is useful when using your own control algorithm (e.g., a proportional line-follower).",translate:!0}},{text:{value:'If the left_power or right_power is outside of the allowed range, the value will be rounded to "-100" or "100" depending on whether the value is positive or negative.',translate:!0}},{text:{value:"If the power is a negative value, the corresponding motor will move backward instead of forward.",translate:!0}},{text:{value:"The program flow is not interrupted. This can most likely be interrupted by sensor input and a condition.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"left_power",translate:!1},type:{text:{value:"Type",translate:!0},value:"Integer",translate:!1},description:{value:"The power of the left motor.",translate:!0},values:{text:{value:"Values",translate:!0},value:["-100 to 100"],translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"right_power",translate:!1},type:{text:{value:"Type",translate:!0},value:"Integer",translate:!1},description:{value:"The power of the right motor.",translate:!0},values:{text:{value:"Values",translate:!0},value:["-100 to 100"],translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"left_power or right_power is not an integer.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"One or both of the Ports do not have a motor connected or the motors could not be paired.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import MotorPair

motor_pair = MotorPair('B', 'A')
`,translate:!1},{line:"# Rotate the Driving Base in place to the right",translate:!0},{line:`
motor_pair.start_tank_at_power(100, -100)`,translate:!1}]}}]}},{title:{value:"Measurements",translate:!0}},{section:{title:"get_default_speed()",translate:!1,components:[{title:{value:"get_default_speed()",translate:!1}},{text:{value:"Retrieves the default motor speed.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The default motor speed.",translate:!0},values:{text:{value:"Values",translate:!0},value:"-100 to 100 %",translate:!1}}}]}},{title:{value:"Settings",translate:!0}},{section:{title:"set_motor_rotation()",translate:!1,components:[{title:{value:"set_motor_rotation(amount, unit='cm')",translate:!1}},{text:{value:"Sets the ratio of one motor rotation to the distance traveled.",translate:!0}},{text:{value:'If there are no gears used between the motors and the wheels of the Driving Base, the "amount" is the circumference of one wheel.',translate:!0}},{text:{value:"Calling this method does not affect the Driving Base if it\u2019s already running. It will only have an effect the next time one of the move or start methods is used.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"amount",translate:!1},type:{text:{value:"Type",translate:!0},value:"float (decimal number)",translate:!1},description:{value:"The distance that the Driving Base moves when both motors move one rotation each.",translate:!0},values:{text:{value:"Values",translate:!0},value:["any value"],translate:!0},default:{text:{value:"Default",translate:!0},value:"17.6",translate:!0}}},{parameter:{param:{value:"unit",translate:!1},type:{text:{value:"Type",translate:!0},value:"String (text)",translate:!0},description:{value:'The unit of measurement specified for the "amount" parameter.',translate:!0},values:{text:{value:"Values",translate:!0},value:['"cm"','"in"']},default:{text:{value:"Default",translate:!0},value:"cm",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"amount is not a number or unit is not a string.",translate:!1}}},{error:{type:{value:"ValueError",translate:!1},description:{value:"unit is not one of the allowed values.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`import math
from spike import MotorPair

motor_pair = MotorPair('B', 'A')
`,translate:!1},{line:'# The SPIKE Prime wheels have a diameter of 17.6 cm Multiplying by "\u03C0" gives the distance traveled (circumference)',translate:!0},{line:`
motor_pair.set_motor_rotation(17.6 * math.pi, 'cm')`,translate:!1}]}}]}},{section:{title:"set_default_speed()",translate:!1,components:[{title:{value:"set_default_speed(speed)",translate:!1}},{text:{value:"Sets the default motor speed.",translate:!0}},{text:{value:'If speed is outside of the allowed range, the value will be set to "-100" or "100" depending on whether the value is positive or negative.',translate:!0}},{text:{value:"Setting the speed will not have any effect until one of the move or start methods is called, even if the Driving Base is already moving.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"speed",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The default motor speed.",translate:!0},values:{text:{value:"Values",translate:!0},value:["-100 to 100"],translate:!0},default:{text:{value:"Default",translate:!0},value:"100",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"speed is not a number.",translate:!1}}}]}]}},{section:{title:"set_stop_action()",translate:!1,components:[{title:{value:"set_stop_action(action)",translate:!1}},{text:{value:"Sets the motor action that will be used when the Driving Base stops.",translate:!0}},{text:{value:'If the action is "brake," the motors will stop quickly and be allowed to turn freely.',translate:!0}},{text:{value:'If the action is "hold," the motors will actively hold their current position and cannot be turned manually.',translate:!0}},{text:{value:'If the action is set to "coast," the motors will stop slowly and can be turned freely.',translate:!0}},{text:{value:'Setting the "stop" action does not take immediate effect on the motors. The setting will be saved and used whenever stop() is called or when one of the move methods has completed without being interrupted.',translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"action",translate:!1},type:{text:{value:"Type",translate:!0},value:"String (text)",translate:!0},description:{value:"The desired action of the motors when the Driving Base stops.",translate:!0},values:{text:{value:"Values",translate:!0},value:['"brake"','"hold"','"coast"']},default:{text:{value:"Default",translate:!0},value:'"coast"',translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"action is not a string.",translate:!1}}},{error:{type:{value:"ValueError",translate:!1},description:{value:"action is not one of the allowed values.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import MotorPair

motor_pair = MotorPair('B', 'A')

`,translate:!1},{line:"# Allow the motors to turn freely after stopping",translate:!0},{line:`
motor_pair.set_stop_action('coast')`,translate:!1}]}}]}}]}},{category:{title:"Operators",translate:!0,components:[{section:{title:"greater_than()",translate:!1,components:[{title:{value:"greater_than(a, b)",translate:!1}},{text:{value:'Tests whether value "a" is greater than value "b."',translate:!0}},{text:{value:'This is the same as "a > b."',translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"a",translate:!1},type:{text:{value:"Type",translate:!0},value:"any type",translate:!1},description:{value:'Any object that can be compared to "b."',translate:!0},values:{text:{value:"Values",translate:!0},value:"any value",translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"b",translate:!1},type:{text:{value:"Type",translate:!0},value:"any type",translate:!1},description:{value:'Any object that can be compared to "a."',translate:!0},values:{text:{value:"Values",translate:!0},value:"any value",translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}}]},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"Boolean",translate:!0},description:{value:"",translate:!0},values:{text:{value:"Values",translate:!0},value:"True if a > b, otherwise False.",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import ColorSensor
from spike.control import wait_until
from spike.operator import greater_than

color_sensor = ColorSensor('A')

wait_until(color_sensor.get_reflected_light, greater_than, 50)`,translate:!1}]}}]}},{section:{title:"greater_than_or_equal_to()",translate:!1,components:[{title:{value:"greater_than_or_equal_to(a, b)",translate:!1}},{text:{value:'Tests whether "a" is greater than or equal to "b."',translate:!0}},{text:{value:'This is the same as "a >= b."',translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"a",translate:!1},type:{text:{value:"Type",translate:!0},value:"any type",translate:!1},description:{value:'Any object that can be compared to "b."',translate:!0},values:{text:{value:"Values",translate:!0},value:"any value",translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"b",translate:!1},type:{text:{value:"Type",translate:!0},value:"any type",translate:!1},description:{value:'Any object that can be compared to "a."',translate:!0},values:{text:{value:"Values",translate:!0},value:"any value",translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}}]},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"Boolean",translate:!0},description:{value:"",translate:!0},values:{text:{value:"Values",translate:!0},value:"True if a >= b, otherwise False.",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import ColorSensor
from spike.control import wait_until
from spike.operator import greater_than_or_equal_to

color_sensor = ColorSensor('A')

wait_until(color_sensor.get_reflected_light, greater_than_or_equal_to, 50)`,translate:!1}]}}]}},{section:{title:"less_than()",translate:!1,components:[{title:{value:"less_than(a, b)",translate:!1}},{text:{value:'Tests whether "a" is less than "b."',translate:!0}},{text:{value:'This is the same as "a &lt; b."',translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"a",translate:!1},type:{text:{value:"Type",translate:!0},value:"any type",translate:!1},description:{value:'Any object that can be compared to "b."',translate:!0},values:{text:{value:"Values",translate:!0},value:"any value",translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"b",translate:!1},type:{text:{value:"Type",translate:!0},value:"any type",translate:!1},description:{value:'Any object that can be compared to "a."',translate:!0},values:{text:{value:"Values",translate:!0},value:"any value",translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}}]},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"Boolean",translate:!0},description:{value:"",translate:!0},values:{text:{value:"Values",translate:!0},value:"True if a < b, otherwise False.",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import ColorSensor
from spike.control import wait_until
from spike.operator import less_than

color_sensor = ColorSensor('A')

wait_until(color_sensor.get_reflected_light, less_than, 50)`,translate:!1}]}}]}},{section:{title:"less_than_or_equal_to()",translate:!1,components:[{title:{value:"less_than_or_equal_to(a, b)",translate:!1}},{text:{value:'Tests whether "a" is less than or equal to "b."',translate:!0}},{text:{value:'This is the same as "a &lt;= b."',translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"a",translate:!1},type:{text:{value:"Type",translate:!0},value:"any type",translate:!1},description:{value:'Any object that can be compared to "b."',translate:!0},values:{text:{value:"Values",translate:!0},value:"any value",translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"b",translate:!1},type:{text:{value:"Type",translate:!0},value:"any type",translate:!1},description:{value:'Any object that can be compared to "a."',translate:!0},values:{text:{value:"Values",translate:!0},value:"any value",translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}}]},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"Boolean",translate:!0},description:{value:"",translate:!0},values:{text:{value:"Values",translate:!0},value:"True if a <= b, otherwise False.",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import ColorSensor
from spike.control import wait_until
from spike.operator import less_than_or_equal_to

color_sensor = ColorSensor('A')

wait_until(color_sensor.get_reflected_light, less_than_or_equal_to, 50)`,translate:!1}]}}]}},{section:{title:"equal_to()",translate:!1,components:[{title:{value:"equal_to(a, b)",translate:!1}},{text:{value:'Tests whether "a" is equal to "b."',translate:!0}},{text:{value:'This is the same as "a == b."',translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"a",translate:!1},type:{text:{value:"Type",translate:!0},value:"any type",translate:!1},description:{value:'Any object that can be compared to "b."',translate:!0},values:{text:{value:"Values",translate:!0},value:"any value",translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"b",translate:!1},type:{text:{value:"Type",translate:!0},value:"any type",translate:!1},description:{value:'Any object that can be compared to "a."',translate:!0},values:{text:{value:"Values",translate:!0},value:"any value",translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}}]},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"Boolean",translate:!0},description:{value:"",translate:!0},values:{text:{value:"Values",translate:!0},value:"True if a == b, otherwise False.",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import ColorSensor
from spike.control import wait_until
from spike.operator import equal_to

color_sensor = ColorSensor('A')

wait_until(color_sensor.get_color, equal_to, 'red')`,translate:!1}]}}]}},{section:{title:"not_equal_to()",translate:!1,components:[{title:{value:"not_equal_to(a, b)",translate:!1}},{text:{value:'Tests whether "a" is not equal to "b."',translate:!0}},{text:{value:'This is the same as "a != b."',translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"a",translate:!1},type:{text:{value:"Type",translate:!0},value:"any type",translate:!1},description:{value:'Any object that can be compared to "b."',translate:!0},values:{text:{value:"Values",translate:!0},value:"any value",translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"b",translate:!1},type:{text:{value:"Type",translate:!0},value:"any type",translate:!1},description:{value:'Any object that can be compared to "a."',translate:!0},values:{text:{value:"Values",translate:!0},value:"any value",translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}}]},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"Boolean",translate:!0},description:{value:"",translate:!0},values:{text:{value:"Values",translate:!0},value:"True if a != b, otherwise False.",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import ColorSensor
from spike.control import wait_until
from spike.operator import not_equal_to

color_sensor = ColorSensor('A')

wait_until(color_sensor.get_color, not_equal_to, None)`,translate:!1}]}}]}}]}},{category:{title:"PrimeHub",translate:!0,components:[{text:{value:"The Hub is divided into six components, each with a number of functions linked to it.",translate:!0}},{text:{value:"To use the Hub, you must first initialiZe it.",translate:!0}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

`,translate:!1},{line:"# Initialize the Hub",translate:!0},{line:"hub = PrimeHub()",translate:!1}]}},{title:{value:"Constants",translate:!0}},{section:{title:"Constants",translate:!0,components:[{title:{value:"PrimeHub.left_button",translate:!1}},{text:{value:"The Left Button on the Hub.",translate:!0}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

hub.left_button.wait_until_pressed()`,translate:!1}]}},{title:{value:"PrimeHub.right_button",translate:!1}},{text:{value:"The Right Button on the Hub.",translate:!0}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

hub.right_button.wait_until_pressed()`,translate:!1}]}},{title:{value:"PrimeHub.speaker",translate:!1}},{text:{value:"The speaker inside the Hub.",translate:!0}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

hub.speaker.beep()`,translate:!1}]}},{title:{value:"PrimeHub.light_matrix",translate:!1}},{text:{value:"The Light Matrix on the Hub.",translate:!0}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

hub.light_matrix.off()`,translate:!1}]}},{title:{value:"PrimeHub.status_light",translate:!1}},{text:{value:"The Brick Status Light on the Hub\u2019s Center Button.",translate:!0}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

hub.status_light.on('blue')`,translate:!1}]}},{title:{value:"PrimeHub.motion_sensor",translate:!1}},{text:{value:"The Motion Sensor inside the Hub.",translate:!0}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

yaw = hub.motion_sensor.get_yaw_angle()`,translate:!1}]}},{title:{value:"PrimeHub.PORT_A",translate:!1}},{text:{value:`The Port that's labeled "A" on the Hub.`,translate:!0}},{title:{value:"PrimeHub.PORT_B",translate:!1}},{text:{value:`The Port that's labeled "B" on the Hub.`,translate:!0}},{title:{value:"PrimeHub.PORT_C",translate:!1}},{text:{value:`The Port that's labeled "C" on the Hub.`,translate:!0}},{title:{value:"PrimeHub.PORT_D",translate:!1}},{text:{value:`The Port that's labeled "D" on the Hub.`,translate:!0}},{title:{value:"PrimeHub.PORT_E",translate:!1}},{text:{value:`The Port that's labeled "E" on the Hub.`,translate:!0}},{title:{value:"PrimeHub.PORT_F",translate:!1}},{text:{value:`The Port that's labeled "F" on the Hub.`,translate:!0}}]}}]}},{category:{title:"Single Motors",translate:!0,components:[{text:{value:"To use the motors, you must first initialize them.",translate:!0}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import Motor

`,translate:!1},{line:"# Initialize the motor",translate:!0},{line:"motor = Motor('A')",translate:!1}]}},{text:{value:"Following are the functions that are linked to the Medium and Large Motors.",translate:!0}},{title:{value:"Actions",translate:!0}},{section:{title:"run_to_position()",translate:!1,components:[{title:{value:"run_to_position(degrees, direction='shortest path', speed=None)",translate:!1}},{text:{value:"Runs the motor to an absolute position.",translate:!0}},{text:{value:'The sign of the speed will be ignored (i.e., absolute value), and the motor will always travel in the direction that\u2019s been specified by the "direction" parameter. If the speed is greater than "100," it will be limited to "100."',translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"degrees",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (positive or negative whole number, including 0)",translate:!1},description:{value:"The target position.",translate:!0},values:{text:{value:"Values",translate:!0},value:["0 to 359"],translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"direction",translate:!1},type:{text:{value:"Type",translate:!0},value:"String (text)",translate:!0},description:{value:"The direction to use to reach the target position.",translate:!0},values:{text:{value:"Values",translate:!0},value:['"Shortest path" could run in either direction, depending on the shortest distance to the target. "Clockwise" will make the motor run clockwise until it reaches the target position. "Counterclockwise" will make the motor run counterclockwise until it reaches the target position.'],translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"speed",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The motor\u2019s speed.",translate:!0},values:{text:{value:"Values",translate:!0},value:["0 to 100%"],translate:!0},default:{text:{value:"Default",translate:!0},value:"If no value is specified, it will use the default speed that\u2019s been set by set_default_speed().",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"degrees or speed is not an integer or direction is not a string.",translate:!1}}},{error:{type:{value:"ValueError",translate:!1},description:{value:"direction is not one of the allowed values or degrees is not within the range of 0-359 (both inclusive).",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The motor has been disconnected from the Port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import Motor

motor = Motor('A')

`,translate:!1},{line:'# Set the motor to position "0," aligning the markers',translate:!0},{line:`
motor.run_to_position(0)`,translate:!1}]}}]}},{section:{title:"run_to_degrees_counted()",translate:!1,components:[{title:{value:"run_to_degrees_counted(degrees, speed=None)",translate:!1}},{text:{value:'Runs the motor until the number of degrees counted is equal to the value that has been specified by the "degrees" parameter.',translate:!0}},{text:{value:'The sign of the speed will be ignored, and the motor will always travel in the direction required to reach the specified number of degrees. If the speed is greater than "100," it will be limited to "100."',translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"degrees",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The target degrees counted.",translate:!0},values:{text:{value:"Values",translate:!0},value:["any number"],translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"speed",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The desired speed.",translate:!0},values:{text:{value:"Values",translate:!0},value:["0 to 100% (positive values only)"],translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"degrees or speed is not an integer.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The motor has been disconnected from the Port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import Motor
from spike.control import wait_for_seconds

motor = Motor('A')

for deg in range(0, 721, 90):
    motor.run_to_degrees_counted(deg)
    wait_for_seconds(1)`,translate:!1}]}}]}},{section:{title:"run_for_degrees()",translate:!1,components:[{title:{value:"run_for_degrees(degrees, speed=None)",translate:!1}},{text:{value:"Runs the motor for a specified number of degrees.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"degrees",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The number of degrees that the motor should run.",translate:!0},values:{text:{value:"Values",translate:!0},value:["any number"],translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"speed",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The motor\u2019s speed.",translate:!0},values:{text:{value:"Values",translate:!0},value:["-100 to 100%"],translate:!0},default:{text:{value:"Default",translate:!0},value:"If no value is specified, it will use the default speed that\u2019s been set by set_default_speed().",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"degrees or speed is not an integer.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The motor has been disconnected from the Port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import Motor

motor = Motor('A')

`,translate:!1},{line:"# Run the motor 90 degrees clockwise",translate:!0},{line:`
motor.run_for_degrees(90)

`,translate:!1},{line:"# Run the motor 90 degrees counterclockwise",translate:!0},{line:`
motor.run_for_degrees(-90)

`,translate:!1},{line:"# Run the motor 360 degrees clockwise at maximum (100%) speed",translate:!0},{line:`
motor.run_for_degrees(360, 100)`,translate:!1}]}}]}},{section:{title:"run_for_rotations()",translate:!1,components:[{title:{value:"run_for_rotations(rotations, speed=None)",translate:!1}},{text:{value:"Runs the motor for a specified number of rotations.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"rotations",translate:!1},type:{text:{value:"Type",translate:!0},value:"float (decimal number)",translate:!1},description:{value:"The number of rotations that the motor should run.",translate:!0},values:{text:{value:"Values",translate:!0},value:["any number"],translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"speed",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The motor\u2019s speed.",translate:!0},values:{text:{value:"Values",translate:!0},value:["-100% to 100%"],translate:!0},default:{text:{value:"Default",translate:!0},value:"If no value is specified, it will use the default speed that\u2019s been set by set_default_speed().",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"rotations is not a number or speed is not an integer.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The motor has been disconnected from the Port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import Motor

motor = Motor('A')

`,translate:!1},{line:"# Run the motor 90 degrees clockwise:",translate:!0},{line:`
motor.run_for_rotations(0.25)

`,translate:!1},{line:"# Run the motor 90 degrees counterclockwise:",translate:!0},{line:`
motor.run_for_rotations(-0.25)`,translate:!1}]}}]}},{section:{title:"run_for_seconds()",translate:!1,components:[{title:{value:"run_for_seconds(seconds, speed=None)",translate:!1}},{text:{value:"Runs the motor for a specified number of seconds.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"seconds",translate:!1},type:{text:{value:"Type",translate:!0},value:"float (decimal number)",translate:!1},description:{value:"The number of seconds for which the motor should run.",translate:!0},values:{text:{value:"Values",translate:!0},value:["any number"],translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"speed",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The motor\u2019s speed.",translate:!0},values:{text:{value:"Values",translate:!0},value:["-100% to 100%"],translate:!0},default:{text:{value:"Default",translate:!0},value:"If no value is specified, it will use the default speed that\u2019s been set by set_default_speed().",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"seconds is not a number or speed is not an integer.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The motor has been disconnected from the Port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import Motor

motor = Motor('A')

`,translate:!1},{line:"# Run clockwise for half a second at 75% speed",translate:!0},{line:`
motor.run_for_seconds(0.5, 75)

`,translate:!1},{line:"# Run counterclockwise for 6 seconds at 30% speed",translate:!0},{line:`
motor.run_for_seconds(6, -30)`,translate:!1}]}}]}},{section:{title:"start()",translate:!1,components:[{title:{value:"start(speed=None)",translate:!1}},{text:{value:"Starts running the motor at a specified speed.",translate:!0}},{text:{value:"The motor will keep moving at this speed until you give it another motor command or when your program ends.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"speed",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The motor\u2019s speed.",translate:!0},values:{text:{value:"Values",translate:!0},value:["-100% to 100%"],translate:!0},default:{text:{value:"Default",translate:!0},value:"If no value is specified, it will use the default speed that\u2019s been set by set_default_speed().",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"speed is not an integer.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The motor has been disconnected from the Port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import Motor

motor = Motor('A')

motor.start()
`,translate:!1},{line:"# wait until something",translate:!0},{line:`
motor.stop()`,translate:!1}]}}]}},{section:{title:"stop()",translate:!1,components:[{title:{value:"stop()",translate:!1}},{text:{value:"Stops the motor.",translate:!0}},{text:{value:'What the motor does after it stops depends on the action that\u2019s been set in set_stop_action(). The default value of set_stop_action() is "coast."',translate:!0}},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The motor has been disconnected from the Port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import Motor

motor = Motor('A')

motor.start()
`,translate:!1},{line:"# wait until something",translate:!0},{line:`
motor.stop()`,translate:!1}]}}]}},{section:{title:"start_at_power()",translate:!1,components:[{title:{value:"start_at_power(power)",translate:!1}},{text:{value:"Starts rotating the motor at a specified power level.",translate:!0}},{text:{value:"The motor will keep moving at this power level until you give it another motor command or when your program ends.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"power",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"Power of the motor.",translate:!0},values:{text:{value:"Values",translate:!0},value:["-100% to 100%"],translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"power is not an integer.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The motor has been disconnected from the Port.",translate:!1}}}]}]}},{title:{value:"Measurements",translate:!0}},{section:{title:"get_speed()",translate:!1,components:[{title:{value:"get_speed()",translate:!1}},{text:{value:"Retrieves the motor speed.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The motor\u2019s current speed",translate:!0},values:{text:{value:"Values",translate:!0},value:"-100% to 100%",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The motor has been disconnected from the Port.",translate:!1}}}]}]}},{section:{title:"get_position()",translate:!1,components:[{title:{value:"get_position()",translate:!1}},{text:{value:"Retrieves the motor position. This is the clockwise angle between the moving marker and the zero-point marker on the motor.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The motor\u2019s position.",translate:!0},values:{text:{value:"Values",translate:!0},value:"0 to 359 degrees",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The motor has been disconnected from the Port.",translate:!1}}}]}]}},{section:{title:"get_degrees_counted()",translate:!1,components:[{title:{value:"get_degrees_counted()",translate:!1}},{text:{value:"Retrieves the number of degrees that have been counted by the motor.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The number of degrees that\u2019s been counted.",translate:!0},values:{text:{value:"Values",translate:!0},value:"any number",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The motor has been disconnected from the Port.",translate:!1}}}]}]}},{section:{title:"get_default_speed()",translate:!1,components:[{title:{value:"get_default_speed()",translate:!1}},{text:{value:"Retrieves the current default motor speed.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The default motor\u2019s speed.",translate:!0},values:{text:{value:"Values",translate:!0},value:"(-100% to 100%).",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}}]}},{title:{value:"Events",translate:!0}},{section:{title:"was_interrupted()",translate:!1,components:[{title:{value:"was_interrupted()",translate:!1}},{text:{value:"Tests whether the motor was interrupted.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"Boolean",translate:!0},description:{value:"True if the motor was interrupted since the last time was_interrupted() was called, otherwise false.",translate:!0},values:{text:{value:"Values",translate:!0},value:"True or False",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The motor has been disconnected from the Port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import Motor

motor = Motor('A')

motor.run_for_rotations(2)
if motor.was_interrupted():
    # the motor did not complete two rotations`,translate:!1}]}}]}},{section:{title:"was_stalled()",translate:!1,components:[{title:{value:"was_stalled()",translate:!1}},{text:{value:"Tests whether the motor was stalled.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"Boolean",translate:!0},description:{value:"True if the motor has stalled since the last time was_stalled() was called, otherwise false.",translate:!0},values:{text:{value:"Values",translate:!0},value:"True or False",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The motor has been disconnected from the Port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import Motor

motor = Motor('A')

motor.set_stall_detection(True)
motor.run_for_rotations(2)
if motor.was_stalled():
    # the motor did not complete two rotations`,translate:!1}]}}]}},{title:{value:"Settings",translate:!0}},{section:{title:"set_degrees_counted()",translate:!1,components:[{title:{value:"set_degrees_counted(degrees_counted)",translate:!1}},{text:{value:'Sets the "number of degrees counted" to the desired value.',translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"degrees_counted",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The value to which the number of degrees counted should be set.",translate:!0},values:{text:{value:"Values",translate:!0},value:["any number"],translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"degrees_counted is not an integer.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The motor has been disconnected from the Port.",translate:!1}}}]}]}},{section:{title:"set_default_speed()",translate:!1,components:[{title:{value:"set_default_speed(default_speed)",translate:!1}},{text:{value:"Sets the default motor speed. This speed will be used when you omit the speed argument in one of the other methods, such as run_for_degrees.",translate:!0}},{text:{value:"Setting the default speed does not affect any motors that are currently running.",translate:!0}},{text:{value:"It will only have an effect when another motor method is called after this method.",translate:!0}},{text:{value:'If the value of default_speed is outside of the allowed range, the default speed will be set to "-100" or "100" depending on whether the value is negative or positive.',translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"default_speed",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The default speed value.",translate:!0},values:{text:{value:"Values",translate:!0},value:["-100% to 100%."],translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"default_speed is not an integer.",translate:!1}}}]}]}},{section:{title:"set_stop_action()",translate:!1,components:[{title:{value:"set_stop_action(action)",translate:!1}},{text:{value:"Sets the default behavior when a motor stops.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"action",translate:!1},type:{text:{value:"Type",translate:!0},value:"String (text)",translate:!0},description:{value:"The desired motor behavior when the motor stops.",translate:!0},values:{text:{value:"Values",translate:!0},value:['"coast"','"brake"','"hold"']},default:{text:{value:"Default",translate:!0},value:"coast",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"action is not a string.",translate:!1}}},{error:{type:{value:"ValueError",translate:!1},description:{value:"action is not one of the allowed values.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The motor has been disconnected from the Port.",translate:!1}}}]}]}},{section:{title:"set_stall_detection()",translate:!1,components:[{title:{value:"set_stall_detection(stop_when_stalled)",translate:!1}},{text:{value:"Turns stall detection on or off.",translate:!0}},{text:{value:'Stall detection senses when a motor has been blocked and can\u2019t move. If stall detection has been enabled and a motor is blocked, the motor will be powered off after two seconds and the current motor command will be interrupted. If stall detection has been disabled, the motor will keep trying to run and programs will "get stuck" until the motor is no longer blocked.',translate:!0}},{text:{value:"Stall detection is enabled by default.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"stop_when_stalled",translate:!1},type:{text:{value:"Type",translate:!0},value:"boolean",translate:!1},description:{value:'Choose "true" to enable stall detection or "false" to disable it.',translate:!0},values:{text:{value:"Values",translate:!0},value:["True or False"],translate:!0},default:{text:{value:"Default",translate:!0},value:"True",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"stop_when_stalled is not a boolean.",translate:!1}}},{error:{type:{value:"RuntimeError",translate:!1},description:{value:"The motor has been disconnected from the Port.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import Motor

motor = Motor('A')

motor.set_stall_detection(False)
motor.run_for_rotations(2)
`,translate:!1},{line:"# The program will never proceed to here if the motor is stalled",translate:!0}]}}]}}]}},{category:{title:"Speaker",translate:!0,components:[{text:{value:"Following are all of the functions that are linked to sounds coming out of the Hub.",translate:!0}},{title:{value:"Actions",translate:!0}},{section:{title:"beep()",translate:!1,components:[{title:{value:"beep(note=60, seconds=0.2)",translate:!1}},{text:{value:"Plays a beep on the Hub.",translate:!0}},{text:{value:"Your program will not continue until seconds have passed.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"note",translate:!1},type:{text:{value:"Type",translate:!0},value:"float (decimal number)",translate:!1},description:{value:"The MIDI note number.",translate:!0},values:{text:{value:"Values",translate:!0},value:['44 to 123 ("60" is the middle C note)'],translate:!0},default:{text:{value:"Default",translate:!0},value:"60 (middle C note)",translate:!0}}},{parameter:{param:{value:"seconds",translate:!1},type:{text:{value:"Type",translate:!0},value:"float (decimal number)",translate:!1},description:{value:"The duration of the beep, specified in seconds.",translate:!0},values:{text:{value:"Values",translate:!0},value:["any values"],translate:!0},default:{text:{value:"Default",translate:!0},value:"0.2 seconds",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"note is not an integer or seconds is not a number.",translate:!1}}},{error:{type:{value:"ValueError",translate:!1},description:{value:"note is not within the allowed range of 44-123.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

`,translate:!1},{line:"# beep beep beep!",translate:!0},{line:`
hub.speaker.beep(60, 0.5)
hub.speaker.beep(67, 0.5)
hub.speaker.beep(60, 0.5)`,translate:!1}]}}]}},{section:{title:"start_beep()",translate:!1,components:[{title:{value:"start_beep(note=60)",translate:!1}},{text:{value:"Starts playing a beep.",translate:!0}},{text:{value:"The beep will play indefinitely until stop() or another beep method is called.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"note",translate:!1},type:{text:{value:"Type",translate:!0},value:"float (decimal number)",translate:!1},description:{value:"The MIDI note number.",translate:!0},values:{text:{value:"Values",translate:!0},value:['44 to 123 ("60" is the middle C note)'],translate:!0},default:{text:{value:"Default",translate:!0},value:"60 (middle C note)",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"note is not an integer.",translate:!1}}},{error:{type:{value:"ValueError",translate:!1},description:{value:"note is not within the allowed range of 44-123",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

hub.speaker.start_beep()
`,translate:!1},{line:"# Do something",translate:!0},{line:`
hub.speaker.stop()`,translate:!1}]}}]}},{section:{title:"stop()",translate:!1,components:[{title:{value:"stop()",translate:!1}},{text:{value:"Stops any sound that is playing.",translate:!0}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

hub.speaker.start_beep()
`,translate:!1},{line:"# Do something",translate:!0},{line:`
hub.speaker.stop()`,translate:!1}]}}]}},{title:{value:"Measurements",translate:!0}},{section:{title:"get_volume()",translate:!1,components:[{title:{value:"get_volume()",translate:!1}},{text:{value:"Retrieves the value of the speaker volume.",translate:!0}},{text:{value:"This only retrieves the volume of the Hub, not the programming app.",translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The current volume.",translate:!0},values:{text:{value:"Values",translate:!0},value:"0 to 100%",translate:!1}}},{Unknown:{name:"field",value:"Return type",translate:!1}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

`,translate:!1},{line:"# Increase the volume of the Hub speaker by 10%",translate:!0},{line:`
hub.speaker.set_volume(hub.speaker.get_volume() + 10)`,translate:!1}]}}]}},{title:{value:"Settings",translate:!0}},{section:{title:"set_volume()",translate:!1,components:[{title:{value:"set_volume(volume)",translate:!1}},{text:{value:"Sets the speaker volume.",translate:!0}},{text:{value:"If the assigned volume is out of range, the nearest volume (i.e., 0 or 100) will be used instead. This only sets the volume of the Hub, not the programming app.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"volume",translate:!1},type:{text:{value:"Type",translate:!0},value:"integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The new volume percentage.",translate:!0},values:{text:{value:"Values",translate:!0},value:["0 to 100%"],translate:!0},default:{text:{value:"Default",translate:!0},value:"100%",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"volume is not an integer.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

`,translate:!1},{line:"# Set the Hub speaker volume to 50%",translate:!0},{line:`
hub.speaker.set_volume(50)`,translate:!1}]}}]}}]}},{category:{title:"Status Light",translate:!0,components:[{text:{value:"Following are all of the functions that are linked to the Hub\u2019s programmable Brick Status Light.",translate:!0}},{title:{value:"Actions",translate:!0}},{section:{title:"on()",translate:!1,components:[{title:{value:"on(color='white')",translate:!1}},{text:{value:"Sets the color of the light.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"color",translate:!1},type:{text:{value:"Type",translate:!0},value:"String (text)",translate:!0},description:{value:"Illuminates the Hub\u2019s Brick Status Light in the specified color.",translate:!0},values:{text:{value:"Values",translate:!0},value:['"azure"','"black"','"blue"','"cyan"','"green"','"orange"','"pink"','"red"','"violet"','"yellow"','"white"']},default:{text:{value:"Default",translate:!0},value:'"white"',translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"color is not a string.",translate:!1}}},{error:{type:{value:"ValueError",translate:!1},description:{value:"color is not one of the allowed values.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

hub.status_light.on('blue')`,translate:!1}]}}]}},{section:{title:"off()",translate:!1,components:[{title:{value:"off()",translate:!1}},{text:{value:"Turns off the light.",translate:!0}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import PrimeHub

hub = PrimeHub()

hub.status_light.off()`,translate:!1}]}}]}}]}},{category:{title:"Wait Functions",translate:!0,components:[{section:{title:"wait_for_seconds()",translate:!1,components:[{title:{value:"wait_for_seconds(seconds)",translate:!1}},{text:{value:"Waits for a specified number of seconds before continuing the program.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"seconds",translate:!1},type:{text:{value:"Type",translate:!0},value:"float (decimal value)",translate:!1},description:{value:"The time to wait, specified in seconds.",translate:!0},values:{text:{value:"Values",translate:!0},value:["any value"],translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"seconds is not a number.",translate:!1}}},{error:{type:{value:"ValueError",translate:!1},description:{value:"seconds is not at least 0.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike.control import wait_for_seconds

`,translate:!1},{line:"# wait for 3 seconds (pause the program flow)",translate:!0},{line:`
wait_for_seconds(3)`,translate:!1}]}}]}},{section:{title:"wait_until()",translate:!1,components:[{title:{value:"wait_until(get_value_function, operator_function=&lt;function equal_to&gt;, target_value=True)",translate:!1}},{text:{value:"Waits until the condition is true before continuing with the program.",translate:!0}},{title:{value:"Parameters",translate:!0}},{parameters:[{parameter:{param:{value:"get_value_function",translate:!1},type:{text:{value:"Type",translate:!0},value:"callable function",translate:!1},description:{value:"",translate:!0},values:{text:{value:"Values",translate:!0},value:"A function that returns the current value to be compared to the target value.",translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"operator_function",translate:!1},type:{text:{value:"Type",translate:!0},value:"callable function",translate:!1},description:{value:"",translate:!0},values:{text:{value:"Values",translate:!0},value:"A function that compares two arguments. The first argument will be the result of get_value_function(), and the second argument will be target_value. The function will compare both values and return the result.",translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}},{parameter:{param:{value:"target_value",translate:!1},type:{text:{value:"Type",translate:!0},value:"any type",translate:!1},description:{value:"",translate:!0},values:{text:{value:"Values",translate:!0},value:"Any object that can be compared by operator_function.",translate:!0},default:{text:{value:"Default",translate:!0},value:"no default value",translate:!0}}}]},{title:{value:"Errors",translate:!0}},{errors:[{error:{type:{value:"TypeError",translate:!1},description:{value:"get_value_function or operator_function is not callable or operator_function does not compare two arguments.",translate:!1}}}]},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import ColorSensor
from spike.control import wait_until
from spike.operator import equal_to

color_sensor = ColorSensor('A')

`,translate:!1},{line:'# Wait for the Color Sensor to detect "red"',translate:!0},{line:`
wait_until(color_sensor.get_color, equal_to, 'red')`,translate:!1}]}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike import ColorSensor, Motor
from spike.control import wait_until

color_sensor = ColorSensor('A')
motor = Motor('B')

def red_or_position():
    return color_sensor.get_color() == 'red' or motor.get_position() &gt; 90`,translate:!1},{line:`
wait_until(red_or_position)`,translate:!1}]}}]}}]}},{category:{title:"Timer",translate:!0,components:[{text:{value:"To use the Timer, you must first initialiZe it.",translate:!0}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike.control import Timer

`,translate:!1},{line:"# InitialiZe the Timer",translate:!0},{line:"timer = Timer()",translate:!1}]}},{text:{value:"Following are all of the functions that are linked to the Timer.",translate:!0}},{section:{title:"reset()",translate:!1,components:[{title:{value:"reset()",translate:!1}},{text:{value:'Sets the Timer to "0."',translate:!0}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike.control import Timer

timer = Timer()`,translate:!1},{line:"# After some time...",translate:!0},{line:"timer.reset()",translate:!1}]}}]}},{section:{title:"now()",translate:!1,components:[{title:{value:"now()",translate:!1}},{text:{value:'Retrieves the "right now" time of the Timer.',translate:!0}},{title:{value:"Returns",translate:!0}},{returns:{type:{text:{value:"Type",translate:!0},value:"Integer (a positive or negative whole number, including 0)",translate:!0},description:{value:"The current time, specified in seconds.",translate:!0},values:{text:{value:"Values",translate:!0},value:"A value greather than 0",translate:!1}}},{text:{value:"Example",translate:!0}},{snippet:{lines:[{line:`from spike.control import Timer

timer = Timer()

while True:`,translate:!1},{line:"    # If it has been more than 5 seconds since the Timer started",translate:!0},{line:`    if timer.now() > 5:
        # then break out of the while loop
        break`,translate:!1}]}}]}}]}}]};
